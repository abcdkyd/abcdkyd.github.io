<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jxie的个人博客</title>
  
  <subtitle>每天进步一点</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://abcdkyd.github.io/"/>
  <updated>2019-07-04T01:41:35.854Z</updated>
  <id>https://abcdkyd.github.io/</id>
  
  <author>
    <name>Jxie</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MAC解压pkg文件</title>
    <link href="https://abcdkyd.github.io/2019/07/03/MAC%E8%A7%A3%E5%8E%8Bpkg%E6%96%87%E4%BB%B6/"/>
    <id>https://abcdkyd.github.io/2019/07/03/MAC解压pkg文件/</id>
    <published>2019-07-03T05:55:41.000Z</published>
    <updated>2019-07-04T01:41:35.854Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xar -xf Setup.pkg</span><br><span class="line">cat ./Payload | cpio -i</span><br></pre></td></tr></table></figure><h3 id="cpio用法"><a class="header-anchor" href="#cpio用法"></a>cpio用法</h3><p>cpio 指令可以将文件复制到 存档包（archives），也可以从存档包（archives）复制出文件。缺省情况下，cpio从标准输入读取输入数据，向标准输出写入输出数据。</p><a id="more"></a><p>归档包（archives）是一种包含其他文件和有关信息的文件。 有关信息包括：</p><ol><li>文件名,</li><li>属主,</li><li>时间戳(timestamp),</li><li>和访问权限。</li></ol><p>cpio支持下列的归档格式:</p><ol><li>binary,</li><li>old ASCII,</li><li>new ASCII, crc,</li><li>HPUX binary,</li><li>HPUX old ASCII,</li><li>old tar,</li><li>POSIX.1 tar。</li></ol><p>默认情况下，cpio创建二进制格式存档，以便与旧的cpio程序兼容。从档案中提取时，cpio会自动识别正在读取的归档类型，并可以读取在具有不同字节顺序的计算机上创建的归档。</p><p>cpio 有三种操作模式，某些选项只能用在对应的操作模式上;</p><h4 id="copy-out-模式"><a class="header-anchor" href="#copy-out-模式"></a>Copy-out 模式</h4><blockquote><p>在copy-out模式下，cpio将文件复制到存档（archives）中。它从标准输入读取文件名列表（每行一个文件名），并将存档（archives）写入标准输出。生成文件名列表的典型方法是使用find命令; 您应该使用 -depth 选项，减少因为进入没有访问权限的目录而引起的麻烦。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cpio &#123;-o|--create&#125; [-0acvABLV] [-C bytes] [-H format] [-M message] \</span><br><span class="line">    [-O [[user@]host:]archive] [-F [[user@]host:]archive] \</span><br><span class="line">    [--file=[[user@]host:]archive] [--format=format] [--message=message]\</span><br><span class="line">    [--null] [--reset-access-time] [--verbose] [--dot] [--append] \</span><br><span class="line">    [--block-size=blocks] [--dereference] [--io-size=bytes] \</span><br><span class="line">    [--rsh-command=command] [--help] [--version] &lt; name-list [&gt; archive]</span><br></pre></td></tr></table></figure><h4 id="copy-in-模式"><a class="header-anchor" href="#copy-in-模式"></a>Copy-in 模式</h4><blockquote><p>在copy-in模式中, cpio 从归档包里读取文件, 或者列出归档包里的内容。它从标准输入读入归档包。任何非选项的命令行参数都被认为是shell globbing的模式; 只有存档中的名称与这些模式中的一个或多个匹配的文件才会从存档中复制。和在shell中不同的是，不是使用<code>.</code>作为通配符，而是使用<code>/</code>作为通配符。如果没有给出任何模式，则提取所有文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cpio &#123;-i|--extract&#125; [-bcdfmnrtsuvBSV] [-C bytes] [-E file] [-H format] [-M message] \</span><br><span class="line">    [-R [user][:.][group]] [-I [[user@]host:]archive] [-F [[user@]host:]archive] \</span><br><span class="line">    [--file=[[user@]host:]archive] [--make-directories] [--nonmatching] \</span><br><span class="line">    [--preserve-modification-time] [--numeric-uid-gid] [--rename] [-t|--list] \</span><br><span class="line">    [--swap-bytes] [--swap] [--dot] [--unconditional] [--verbose] [--block-size=blocks] \</span><br><span class="line">    [--swap-halfwords] [--io-size=bytes] [--pattern-file=file] [--format=format] \</span><br><span class="line">    [--owner=[user][:.][group]] [--no-preserve-owner] [--message=message] \</span><br><span class="line">    [--force-local] [--no-absolute-filenames] [--absolute-filenames] [--sparse] \</span><br><span class="line">    [--only-verify-crc] [--to-stdout] [--quiet] [--rsh-command=command] [--help] \</span><br><span class="line">    [--version] [pattern...] [&lt; archive]</span><br></pre></td></tr></table></figure><h4 id="copy-pass-模式"><a class="header-anchor" href="#copy-pass-模式"></a>Copy-pass 模式</h4><blockquote><p>在copy-pass模式中, cpio把文件从一棵目录树复制到另一棵, 它结合了 copy-in 和 copy-out 的操作, 但不使用归档包。 cpio从标准输入读取欲复制的文件名列表; 并复制它们复制到目标目录（非选项的参数都被认为是目标目录）。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cpio &#123;-p|--pass-through&#125; [-0adlmuvLV] [-R [user][:.][group]] [--null] \</span><br><span class="line">     [--reset-access-time] [--make-directories] [--link] [--quiet] \</span><br><span class="line">    [--preserve-modification-time] [--unconditional] [--verbose] [--dot] \</span><br><span class="line">    [--dereference] [--owner=[user][:.][group]] [--no-preserve-owner] \</span><br><span class="line">    [--sparse] [--help] [--version] destination-directory &lt; name-list</span><br></pre></td></tr></table></figure><p>备份会使用到的选项与参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  -o ：将数据 copy 输出到文件或装置上 </span><br><span class="line">  -B ：让默认的 Blocks 可以添加至 5120 bytes ，默认是 512 bytes ！ </span><br><span class="line">　  　 这样的好处是可以让大文件的储存速度加快(请参考 i-nodes 的观念) </span><br><span class="line">还原会使用到的选项与参数：</span><br><span class="line">  -i ：将数据自文件或装置 copy 出来系统当中 </span><br><span class="line">  -d ：自动创建目录！使用 cpio 所备份的数据内容不见得会在同一层目录中，因此我们</span><br><span class="line">       必须要让 cpio 在还原时可以创建新目录，此时就得要 -d 选项的帮助！</span><br><span class="line">  -u ：自动的将较新的文件覆盖较旧的文件！</span><br><span class="line">  -t ：需配合 -i 选项，可用在&quot;察看&quot;以 cpio 创建的文件或装置的内容 </span><br><span class="line">一些可共享的选项与参数：</span><br><span class="line">  -v ：让储存的过程中文件名称可以在萤幕上显示 </span><br><span class="line">  -c ：一种较新的 portable format 方式储存</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;xar -xf Setup.pkg&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat ./Payload | cpio -i&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;cpio用法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#cpio用法&quot;&gt;&lt;/a&gt;cpio用法&lt;/h3&gt;
&lt;p&gt;cpio 指令可以将文件复制到 存档包（archives），也可以从存档包（archives）复制出文件。缺省情况下，cpio从标准输入读取输入数据，向标准输出写入输出数据。&lt;/p&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://abcdkyd.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="MAC" scheme="https://abcdkyd.github.io/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>docker笔记</title>
    <link href="https://abcdkyd.github.io/2019/05/07/docker%E7%AC%94%E8%AE%B0/"/>
    <id>https://abcdkyd.github.io/2019/05/07/docker笔记/</id>
    <published>2019-05-07T02:44:01.000Z</published>
    <updated>2019-05-07T03:21:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="docker操作"><a class="header-anchor" href="#docker操作"></a>docker操作</h2><h3 id="docker-run"><a class="header-anchor" href="#docker-run"></a>docker run</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// -i标志保证容器中STDIN是开启的 -t创建的容器分配一个伪tty终端</span><br><span class="line">docker run --name bob_the_container -i -t ubuntu /bin/bash</span><br><span class="line">    </span><br><span class="line">// 创建守护式容器，</span><br><span class="line">docker run --name daemon_dave -d ubuntu /bin/sh -c &quot;while true; do echo hello world; sleep 1; done&quot;</span><br></pre></td></tr></table></figure><h3 id="docker-start-stop-restart-rm"><a class="header-anchor" href="#docker-start-stop-restart-rm"></a>docker start | stop | restart | rm</h3><h3 id="docker-attach"><a class="header-anchor" href="#docker-attach"></a>docker attach</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 重新回到了容器的Bash提示符</span><br><span class="line">docker attach bob_the_container</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="docker-logs"><a class="header-anchor" href="#docker-logs"></a>docker logs</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker logs bob_the_container</span><br><span class="line"></span><br><span class="line">// 以打开文档形式</span><br><span class="line">docker logs -f bob_the_container</span><br><span class="line"></span><br><span class="line">// 获取日志的最后10行内容</span><br><span class="line">docker logs --tail 10 bob_the_container</span><br><span class="line"></span><br><span class="line">// 跟踪某个容器的最新日志而不必读取整个日志文件</span><br><span class="line">docker logs --tail 0 -f bob_the_container</span><br></pre></td></tr></table></figure><h3 id="docker-run-log-driver-syslog"><a class="header-anchor" href="#docker-run-log-driver-syslog"></a>docker run --log-driver=“syslog”</h3><blockquote><p>(还有一个可用的选项是none，这个选项将会禁用所有容器中的日志，导致docker logs命令也被禁用)</p></blockquote><h3 id="docker-top"><a class="header-anchor" href="#docker-top"></a>docker top</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">docker top bob_the_container</span><br><span class="line"></span><br><span class="line">// 输出结果</span><br><span class="line">PID USER COMMAND</span><br><span class="line">977 root /bin/sh -c while true; do echo hello world; sleep 1;</span><br><span class="line">　done</span><br><span class="line">1123 root sleep 1</span><br></pre></td></tr></table></figure><h3 id="docker-stats"><a class="header-anchor" href="#docker-stats"></a>docker stats</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 显示一个或多个容器的统计信息</span><br><span class="line">docker stats bob_the_container1 bob_the_container2 ...</span><br></pre></td></tr></table></figure><h3 id="docker-exec"><a class="header-anchor" href="#docker-exec"></a>docker exec</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 在容器中运行后台任务</span><br><span class="line">docker exec -d bob_the_container touch /etc/new_config_file</span><br><span class="line"></span><br><span class="line">// 在容器内运行交互命令</span><br><span class="line">docker exec -t -i bob_the_container /bin/bash</span><br></pre></td></tr></table></figure><h3 id="docker-run-restart-always"><a class="header-anchor" href="#docker-run-restart-always"></a>docker run --restart=always</h3><blockquote><p>自动重启容器 只有当容器的退出代码为非0值的时候，才会自动重启，可传参数为接受重启次数：–restart=on-failure:5</p></blockquote><h3 id="docker-inspect"><a class="header-anchor" href="#docker-inspect"></a>docker inspect</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// docker inspect命令会对容器进行详细的检查，然后返回其配置信息，包括名称、命令、网络配置以及很多有用的数据</span><br><span class="line">docker inspect bob_the_container</span><br><span class="line"></span><br><span class="line">// 可以用-f或者--format标志来选定查看结果，根据json层级关系选取</span><br><span class="line">docker inspect --format &apos;&#123;&#123;.Name&#125;&#125; &#123;&#123;.State.Running&#125;&#125;&apos; bob_the_container1 bob_the_container2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;docker操作&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#docker操作&quot;&gt;&lt;/a&gt;docker操作&lt;/h2&gt;
&lt;h3 id=&quot;docker-run&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#docker-run&quot;&gt;&lt;/a&gt;docker run&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// -i标志保证容器中STDIN是开启的 -t创建的容器分配一个伪tty终端&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name bob_the_container -i -t ubuntu /bin/bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 创建守护式容器，	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker run --name daemon_dave -d ubuntu /bin/sh -c &amp;quot;while true; do echo hello world; sleep 1; done&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;docker-start-stop-restart-rm&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#docker-start-stop-restart-rm&quot;&gt;&lt;/a&gt;docker start | stop | restart | rm&lt;/h3&gt;
&lt;h3 id=&quot;docker-attach&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#docker-attach&quot;&gt;&lt;/a&gt;docker attach&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 重新回到了容器的Bash提示符&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;docker attach bob_the_container&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="docker" scheme="https://abcdkyd.github.io/categories/docker/"/>
    
    
      <category term="docker" scheme="https://abcdkyd.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>MAC安装Pygame</title>
    <link href="https://abcdkyd.github.io/2019/04/27/MAC%E5%AE%89%E8%A3%85pygame/"/>
    <id>https://abcdkyd.github.io/2019/04/27/MAC安装pygame/</id>
    <published>2019-04-27T06:04:42.000Z</published>
    <updated>2019-07-03T08:18:06.695Z</updated>
    
    <content type="html"><![CDATA[<ol><li>安装pygame依赖包：<code>brew install hg sdl sdl_image sdl_ttf</code>，如果想启动更高级的功能，如在游戏中包含声音，可安装下面的两个额外的库：<code>brew install sdl_mixer portmidi</code></li><li>安装Pygame：<code>pip3 install --user hg+http://bitbucket.org/pygame/pygame</code>，如果报错可以尝试：<code>pip3 install pygame</code></li><li>验证 Pygame 是否安装成功，可以启动一个Python终端，输入：<code>import pygame</code></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;安装pygame依赖包：&lt;code&gt;brew install hg sdl sdl_image sdl_ttf&lt;/code&gt;，如果想启动更高级的功能，如在游戏中包含声音，可安装下面的两个额外的库：&lt;code&gt;brew install sdl_mixer port
      
    
    </summary>
    
      <category term="环境配置" scheme="https://abcdkyd.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="MAC" scheme="https://abcdkyd.github.io/tags/MAC/"/>
    
      <category term="Python" scheme="https://abcdkyd.github.io/tags/Python/"/>
    
      <category term="Pygame" scheme="https://abcdkyd.github.io/tags/Pygame/"/>
    
  </entry>
  
  <entry>
    <title>MAC安装MongoDB</title>
    <link href="https://abcdkyd.github.io/2019/04/07/MAC%E5%AE%89%E8%A3%85mongodb/"/>
    <id>https://abcdkyd.github.io/2019/04/07/MAC安装mongodb/</id>
    <published>2019-04-07T03:30:44.000Z</published>
    <updated>2019-07-03T08:18:57.751Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载安装"><a class="header-anchor" href="#下载安装"></a>下载安装</h4><ol><li><code>curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.5.tgz</code> 或者 <a href="https://www.mongodb.com/dr/fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.5.tgz/download" target="_blank" rel="noopener">官网下载tar包</a></li><li>解压 <code>tar -zxvf mongodb-osx-ssl-x86_64-4.0.5.tgz</code></li><li>重命名 <code>mv ./mongodb-osx-ssl-x86_64-4.0.5.tgz ./mongodb</code></li><li>移动到合适位置 <code>sudo mv ./mongodb /usr/local/opt/</code></li><li>在.bashrc文件添加 <code>export PATH=/usr/local/opt/mongodb/bin:$PATH</code></li></ol><h4 id="brew安装"><a class="header-anchor" href="#brew安装"></a>brew安装</h4><ul><li><code>sudo brew install mongodb</code></li><li><code>sudo brew install mongodb --with-openssl</code> // 要安装支持 TLS/SSL 命令</li><li><code>sudo brew install mongodb --devel</code> // 安装最新开发版本</li></ul><a id="more"></a><h4 id="运行数据库"><a class="header-anchor" href="#运行数据库"></a>运行数据库</h4><ol><li><p>创建数据库目录和日志目录</p><p><code>sudo mkdir -p /usr/local/var/mongo/db /usr/local/var/mongo/logs</code></p></li><li><p>启动数据库，指定数据库目录和日志目录，日志采用分文件存储</p><p><code>mongod --dbpath /usr/local/var/mongo/db --logpath /usr/local/var/mongo/logs/mongodb.log --logRotate rename &amp;</code></p></li></ol><!-- more --><h4 id="连接数据库"><a class="header-anchor" href="#连接数据库"></a>连接数据库</h4><p>连接命令：<code>mongo</code></p><p>但是新版本会提示：‘WARNING: Access control is not enabled for the database.’，这是MongDB增加了安全性设计，推荐用户进行身份验证。</p><ol><li><p>创建管理员账号和密码，并设置权限，在mongo命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use admin</span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;admin&quot;,</span><br><span class="line">    pwd: &quot;123123&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>重启MongoDB服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 先kill了原来的进程，然后加--auth参数再启动mongo</span><br><span class="line">mongod --auth --dbpath /usr/local/var/mongo/db --logpath /usr/local/var/mongo/logs/mongodb.log --logRotate rename &amp;</span><br></pre></td></tr></table></figure></li><li><p>用户名登录</p><p><code>mongo -u admin -p 123123 --authenticationDatabase admin</code></p></li></ol><h4 id="其他"><a class="header-anchor" href="#其他"></a>其他</h4><p>添加额外权限用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">use test</span><br><span class="line">db.createUser(</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;tester&quot;,</span><br><span class="line">    pwd: &quot;123&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;test&quot; &#125;,</span><br><span class="line">             &#123; role: &quot;read&quot;, db: &quot;reporting&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">db.updateUser(&quot;jhpm&quot;,</span><br><span class="line">  &#123;</span><br><span class="line">    user: &quot;jhpm&quot;,</span><br><span class="line">    pwd: &quot;123123&quot;,</span><br><span class="line">    roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;pht_log&quot; &#125;,</span><br><span class="line">             &#123; role: &quot;dbAdmin&quot;, db: &quot;pht_log&quot; &#125; ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ol><li>数据库用户角色：read、readWrite;</li><li>数据库管理角色：dbAdmin、dbOwner、userAdmin；</li><li>集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</li><li>备份恢复角色：backup、restore；</li><li>所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</li><li>超级用户角色：root<br>// 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</li><li>内部角色：__system</li></ol><ul><li>Read：允许用户读取指定数据库</li><li>readWrite：允许用户读写指定数据库</li><li>dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</li><li>userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</li><li>clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</li><li>readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</li><li>readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</li><li>userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</li><li>dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</li><li>root：只在admin数据库中可用。超级账号，超级权限</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;下载安装&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#下载安装&quot;&gt;&lt;/a&gt;下载安装&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;curl -O https://fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.5.tgz&lt;/code&gt; 或者 &lt;a href=&quot;https://www.mongodb.com/dr/fastdl.mongodb.org/osx/mongodb-osx-ssl-x86_64-4.0.5.tgz/download&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网下载tar包&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;解压 &lt;code&gt;tar -zxvf mongodb-osx-ssl-x86_64-4.0.5.tgz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;重命名 &lt;code&gt;mv ./mongodb-osx-ssl-x86_64-4.0.5.tgz ./mongodb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移动到合适位置 &lt;code&gt;sudo mv ./mongodb /usr/local/opt/&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在.bashrc文件添加 &lt;code&gt;export PATH=/usr/local/opt/mongodb/bin:$PATH&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;brew安装&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#brew安装&quot;&gt;&lt;/a&gt;brew安装&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sudo brew install mongodb&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo brew install mongodb --with-openssl&lt;/code&gt; // 要安装支持 TLS/SSL 命令&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo brew install mongodb --devel&lt;/code&gt; // 安装最新开发版本&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://abcdkyd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="MongoDB" scheme="https://abcdkyd.github.io/tags/MongoDB/"/>
    
      <category term="MAC" scheme="https://abcdkyd.github.io/tags/MAC/"/>
    
  </entry>
  
  <entry>
    <title>用vscode开发golang</title>
    <link href="https://abcdkyd.github.io/2019/02/14/%E7%94%A8vscode%E5%BC%80%E5%8F%91golang/"/>
    <id>https://abcdkyd.github.io/2019/02/14/用vscode开发golang/</id>
    <published>2019-02-14T08:56:28.000Z</published>
    <updated>2019-04-07T03:40:32.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="首先配置gopath"><a class="header-anchor" href="#首先配置gopath"></a>首先配置GOPATH</h3><p><code>GOPATH</code>允许多个目录，当有多个目录时，请注意分隔符，多个目录的时候Windows是分号<code>;</code>，Linux系统是冒号<code>:</code>，当有多个GOPATH时默认将<code>go get</code>获取的包存放在第一个目录下，在开发的gopath中写代码，使用go工具(<code>go install</code>, <code>go build</code>) 会将二进制包安装到开发的gopath中</p><p><code>GOPATH</code>目录约定有三个子目录</p><ul><li><code>src</code>存放源代码(比如：.go .c .h .s等)</li><li><code>pkg</code>编译时生成的中间文件（比如：.a）</li><li><code>bin</code>编译后生成的可执行文件（为了方便，可以把此目录加入到 <code>$PATH</code> 变量中，如果有多个gopath，那么使用<code>${GOPATH//://bin:}/bin</code>添加所有的bin目录）</li></ul><a id="more"></a><h3 id="使用vscode"><a class="header-anchor" href="#使用vscode"></a>使用vscode</h3><p>在官网下载vscode安装，然后安装Microsoft的go插件，由于网络原因，这时会提示你现在有好几个插件安装失败。</p><p>手动把插件安装上：</p><ol><li><p>在<code>$GOPATH</code>的第一个目录下，建立目录：<code>mkdir -p src/golang.org/x</code></p></li><li><p>进入上面新建的目录中，下载插件源码：<code>git clone https://github.com/golang/tools.git tools</code></p></li><li><p>返回<code>$GOPATH</code>的第一个目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">go install github.com/ramya-rao-a/go-outline</span><br><span class="line">go install github.com/acroca/go-symbols</span><br><span class="line">go install golang.org/x/tools/cmd/guru</span><br><span class="line">go install golang.org/x/tools/cmd/gorename</span><br><span class="line">go install github.com/rogpeppe/godef</span><br><span class="line">go install github.com/sqs/goreturns</span><br></pre></td></tr></table></figure></li><li><p>单独安装golint，进入目录<code>$GOPATH/src/golang.org/x</code>，下载golint源码：<code>git clone https://github.com/golang/lint</code></p></li><li><p>返回<code>$GOPATH</code>的第一个目录，执行<code>go install golang.org/x/lint/golint</code></p></li><li><p>最后在vscode的setting.json中添加<code>&quot;go.formatTool&quot;: &quot;goreturns&quot;</code></p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;首先配置gopath&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#首先配置gopath&quot;&gt;&lt;/a&gt;首先配置GOPATH&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;GOPATH&lt;/code&gt;允许多个目录，当有多个目录时，请注意分隔符，多个目录的时候Windows是分号&lt;code&gt;;&lt;/code&gt;，Linux系统是冒号&lt;code&gt;:&lt;/code&gt;，当有多个GOPATH时默认将&lt;code&gt;go get&lt;/code&gt;获取的包存放在第一个目录下，在开发的gopath中写代码，使用go工具(&lt;code&gt;go install&lt;/code&gt;, &lt;code&gt;go build&lt;/code&gt;) 会将二进制包安装到开发的gopath中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;GOPATH&lt;/code&gt;目录约定有三个子目录&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;src&lt;/code&gt;存放源代码(比如：.go .c .h .s等)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pkg&lt;/code&gt;编译时生成的中间文件（比如：.a）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bin&lt;/code&gt;编译后生成的可执行文件（为了方便，可以把此目录加入到 &lt;code&gt;$PATH&lt;/code&gt; 变量中，如果有多个gopath，那么使用&lt;code&gt;${GOPATH//://bin:}/bin&lt;/code&gt;添加所有的bin目录）&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="后端" scheme="https://abcdkyd.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="golang" scheme="https://abcdkyd.github.io/tags/golang/"/>
    
  </entry>
  
  <entry>
    <title>postgres触发器</title>
    <link href="https://abcdkyd.github.io/2019/01/08/postgres%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>https://abcdkyd.github.io/2019/01/08/postgres触发器/</id>
    <published>2019-01-08T06:28:48.000Z</published>
    <updated>2019-07-23T03:58:07.742Z</updated>
    
    <content type="html"><![CDATA[<h3 id="触发器的创建语法"><a class="header-anchor" href="#触发器的创建语法"></a>触发器的创建语法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CREATE [CONSTRAINT] TRIGGER name </span><br><span class="line">&#123; BEFORE | AFTER | INSTEAD OF &#125; &#123; event [ OR ...] &#125; </span><br><span class="line">ON table_name</span><br><span class="line">[ FROM referenced_table_name ]</span><br><span class="line">&#123;[ NOT DEFERRABLE ][ DEFERRABLE ]&#123;[ INITIALLY IMMEDIATE ][ INITIALLY DEFERRED]&#125;&#125; </span><br><span class="line">[ FOR [ EACH ] &#123; ROW | STATEMENT &#125; ]</span><br><span class="line">[ WHEN (condition) ]</span><br><span class="line">EXECUTE PROCEDURE function_name ( arguments )</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="触发器创建步骤"><a class="header-anchor" href="#触发器创建步骤"></a>触发器创建步骤</h3><p>先为触发器创建一个执行函数，返回类型为触发器类型，然后创建相应的触发器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">create or replace function trigger_loans_tmp_del() returns TRIGGER as $trigger$</span><br><span class="line">begin</span><br><span class="line">    ...</span><br><span class="line">    return null;</span><br><span class="line">end;</span><br><span class="line">$trigger$ LANGUAGE plpgsql;</span><br><span class="line"></span><br><span class="line">CREATE trigger tr_loans_tmp</span><br><span class="line">before delete on loans_tmp</span><br><span class="line">for each row</span><br><span class="line">execute procedure trigger_loans_tmp_del();</span><br></pre></td></tr></table></figure><h3 id="触发器的分类如下："><a class="header-anchor" href="#触发器的分类如下："></a>触发器的分类如下：</h3><ul><li>语句级触发器：一条SQL语句，触发器只执行一次，即使是修改了零行数据的SQL，也会导致相应的触发器执行。</li><li>行级触发器：每行发生变化，就会执行一次触发器。</li><li>BEFORE触发器：在触发事件之前执行触发器。</li><li>AFTER触发器：在触发事件之后执行触发器。</li></ul><h3 id="触发器中的一些特殊变量"><a class="header-anchor" href="#触发器中的一些特殊变量"></a>触发器中的一些特殊变量</h3><ul><li><code>NEW</code> 数据类型是RECORD；该变量为行级触发器中的INSERT/UPDATE操作保持新数据行。在语句级别的触发器以及DELETE操作，这个变量未被赋值。</li><li><code>OLD</code>  数据类型是RECORD；该变量为行级触发器中的UPDATE/DELETE操作保持新数据行。在语句级别的触发器以及INSERT操作，这个变量未被赋值。</li><li><code>TG_NAME</code>  数据类型是name；该变量包含实际触发的触发器名。</li><li><code>TG_WHEN</code>  数据类型是text；是值为BEFORE、AFTER或INSTEAD OF的一个字符串，取决于触发器的定义。</li><li><code>TG_LEVEL</code>  数据类型是text；是值为ROW或STATEMENT的一个字符串，取决于触发器的定义。</li><li><code>TG_OP</code> 数据类型是text；是值为INSERT、UPDATE、DELETE或TRUNCATE的一个字符串，它说明触发器是为哪个操作引发。</li><li><code>TG_RELID</code>  数据类型是oid；是导致触发器调用的表的对象 ID。</li><li><code>TG_RELNAME</code>  数据类型是name；是导致触发器调用的表的名称。现在已经被废弃，并且可能在未来的一个发行中消失。使用TG_TABLE_NAME替代。</li><li><code>TG_TABLE_NAME</code> 数据类型是name；是导致触发器调用的表的名称。</li><li><code>TG_TABLE_SCHEMA</code> 数据类型是name；是导致触发器调用的表所在的模式名。</li><li><code>TG_NARGS</code>  数据类型是integer；在CREATE TRIGGER语句中给触发器过程的参数数量。</li><li><code>TG_ARGV[]</code> 数据类型是text数组；来自CREATE TRIGGER语句的参数。索引从 0 开始记数。非法索引（小于 0 或者大于等于tg_nargs）会导致返回一个空值。</li></ul><h3 id="触发器要点"><a class="header-anchor" href="#触发器要点"></a>触发器要点</h3><ul><li>FOR EACH ROW触发器被标记的操作修改的每一行被称为一次</li><li>FOR EACH STATEMENT触发器为只执行一次对于任何给定的操作，不管它有多少行修改。</li><li>WHEN子句和触发器动作可能访问的行元素被插入，删除或更新使用的形式NEW.column-name和OLD.column-name，其中列名是从表中的列名的引用该触发器相关联的。</li><li>如果提供WHEN子句，PostgreSQL的报表只执行WHEN子句为true的行。如果没有提供WHEN子句，PostgreSQL的语句执行的所有行。</li><li>如果有多个相同类型的触发器定义了相同的事件，他们将被触发名称是按字母顺序排列。</li><li>BEFORE，AFTER或INSTEAD OF关键字决定何时触发动作将被执行，相对于插入，修改或移除相关的行。</li><li>触发器表，它们与丢弃时自动删除。</li><li>要修改的表必须存在，在同一数据库中的表或视图，触发器被附加，必须使用表名而不使用database.tablename。</li><li>约束时指定的选项创建一个约束触发器。这是一个普通的触发器除外，可以调整使用SET（设定）约束的触发器触发的定时相同。预计约束触发器违反他们所实施的限制时引发异常</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;触发器的创建语法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#触发器的创建语法&quot;&gt;&lt;/a&gt;触发器的创建语法&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;CREATE [CONSTRAINT] TRIGGER name &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123; BEFORE | AFTER | INSTEAD OF &amp;#125; &amp;#123; event [ OR ...] &amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ON table_name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ FROM referenced_table_name ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;[ NOT DEFERRABLE ][ DEFERRABLE ]&amp;#123;[ INITIALLY IMMEDIATE ][ INITIALLY DEFERRED]&amp;#125;&amp;#125; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ FOR [ EACH ] &amp;#123; ROW | STATEMENT &amp;#125; ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ WHEN (condition) ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EXECUTE PROCEDURE function_name ( arguments )&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://abcdkyd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="PostgreSQL" scheme="https://abcdkyd.github.io/tags/PostgreSQL/"/>
    
      <category term="触发器" scheme="https://abcdkyd.github.io/tags/%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>php设计模式</title>
    <link href="https://abcdkyd.github.io/2018/12/29/php%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://abcdkyd.github.io/2018/12/29/php设计模式/</id>
    <published>2018-12-29T14:26:48.000Z</published>
    <updated>2019-04-07T03:40:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适配器模式"><a class="header-anchor" href="#适配器模式"></a>适配器模式</h3><blockquote><p>适配器设计模式只是将某个对象的接口适配为另外一个对象所期望的接口</p></blockquote><p>当添加新功能时，功能要求采用不同的方式使用现有的对象，而不是采用远行设计的方式，可以采用适配器模式构建另一个对象的方案。</p><p>同时，适配器设计模式也是针对数据源改变的优秀解决方案，常见有<code>改变数据库引擎</code>和<code>第三方提供数据格式变化</code></p><h4 id="关系说明"><a class="header-anchor" href="#关系说明"></a>关系说明</h4><ol><li>MyObject类包含一个名为 methodA()的公共方法。OriginalConsumer类获取MyObject的一个实例，并且在执行其doSomthing()函数期间调用methodA()</li><li>引入NewConsumer类。这个类的doSomthing( )函数在执行期间期望调用MyObject实例的一个公共方法: methodB()</li><li>通过扩展MyObject类创建MyObjectAdapterForNewConsumer类。像NewConsumer期望的样，新创建的类会提供名为methodB()的公共方法。在这个简单的示例中，所有methodB()都会调用methodA()</li></ol><a id="more"></a><h4 id="代码示例"><a class="header-anchor" href="#代码示例"></a>代码示例</h4><ol><li><p>类适配器模式（类适配器使用的是继承）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// 目标角色</span><br><span class="line">interface Target &#123;</span><br><span class="line"> </span><br><span class="line">    // 源类也有的方法1</span><br><span class="line">    public function sampleMethod1();</span><br><span class="line"> </span><br><span class="line">    // 源类没有的方法2</span><br><span class="line">    public function sampleMethod2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 源角色</span><br><span class="line">class Adaptee &#123;</span><br><span class="line"></span><br><span class="line">    // 源类含有的方法</span><br><span class="line">    public function sampleMethod1() &#123;</span><br><span class="line">        echo &apos;Adaptee sampleMethod1 &lt;br /&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 类适配器角色</span><br><span class="line">class Adapter extends Adaptee implements Target &#123;</span><br><span class="line"> </span><br><span class="line">    // 源类中没有sampleMethod2方法，在此补充</span><br><span class="line">    public function sampleMethod2() &#123;</span><br><span class="line">        echo &apos;Adapter sampleMethod2 &lt;br /&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Client &#123;</span><br><span class="line">    public static function main() &#123;</span><br><span class="line">        $adapter = new Adapter();</span><br><span class="line">        $adapter-&gt;sampleMethod1();</span><br><span class="line">        $adapter-&gt;sampleMethod2();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象适配器模式（对象适配器使用的是委派）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// 目标角色</span><br><span class="line">interface Target &#123;</span><br><span class="line"> </span><br><span class="line">    // 源类也有的方法1</span><br><span class="line">    public function sampleMethod1();</span><br><span class="line"> </span><br><span class="line">    // 源类没有的方法2</span><br><span class="line">    public function sampleMethod2();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 源角色</span><br><span class="line">class Adaptee &#123;</span><br><span class="line"> </span><br><span class="line">    // 源类含有的方法</span><br><span class="line">    public function sampleMethod1() &#123;</span><br><span class="line">        echo &apos;Adaptee sampleMethod1 &lt;br /&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">// 类适配器角色</span><br><span class="line">class Adapter implements Target &#123;</span><br><span class="line"> </span><br><span class="line">    private $_adaptee;</span><br><span class="line"> </span><br><span class="line">    public function __construct(Adaptee $adaptee) &#123;</span><br><span class="line">        $this-&gt;_adaptee = $adaptee;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 委派调用Adaptee的sampleMethod1方法</span><br><span class="line">    public function sampleMethod1() &#123;</span><br><span class="line">        $this-&gt;_adaptee-&gt;sampleMethod1();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    // 源类中没有sampleMethod2方法，在此补充</span><br><span class="line">    public function sampleMethod2() &#123;</span><br><span class="line">        echo &apos;Adapter sampleMethod2 &lt;br /&gt;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">class Client &#123;</span><br><span class="line">    public static function main() &#123;</span><br><span class="line">        $adaptee = new Adaptee();</span><br><span class="line">        $adapter = new Adapter($adaptee);</span><br><span class="line">        $adapter-&gt;sampleMethod1();</span><br><span class="line">        $adapter-&gt;sampleMethod2();</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="建造者模式"><a class="header-anchor" href="#建造者模式"></a>建造者模式</h3><blockquote><p>建造者设计模式定义了处理其他对象的复杂构建的对象设计</p></blockquote><p>通常，复杂性是某个方法内包含的实际逻辑，但当提及一个与对象实例化相关联的复杂对象时，复杂意味着创建这个完整对象所需的步骤等级，建造者设计模式的目的是<code>消除其他对象的复杂创建过程</code>。</p><p>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，用户不需要知道内部的具体构建细节，<code>把构建复杂对象的过程封装起来</code>。</p><h4 id="关系说明-v2"><a class="header-anchor" href="#关系说明-v2"></a>关系说明</h4><ol><li>MyObject类具有能够完全实现对象构造的两个方法。为了具有完整的MyObject对象，需要执行complexFunctionA()和complexFunctionB()方法。</li><li>MyObjectBuilder类包含一个名为createInstanceOfMyObject()的方法。这个类负责创建MyObject类的一个简单实例。需要注意没有用于进一步构造的配置选项。这个类还存储MyObjectBuilder类创建的实例中的私有实例。</li><li>buildMyObject()方法接受参数configurationOptions.这个方法用于调用在MyObjectBuilder对象中存储的MyObject对象的complexFunctionA()和complexFunctionB()方法。</li><li>getBuildMyObject()方法返回MyObjectBuilder 对象内部MyObject对象的私有实例，该实例既是完整的，也是正确构建的。</li></ol><h4 id="代码示例-v2"><a class="header-anchor" href="#代码示例-v2"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">class People&#123;</span><br><span class="line">    public $head;</span><br><span class="line">    public $body;</span><br><span class="line">    </span><br><span class="line">    //不太此类中直接给属性赋值</span><br><span class="line">    function __construct()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//定义具备建造者所需实现的方法</span><br><span class="line">abstract class PeopleBuilder&#123;</span><br><span class="line">    abstract function buildHead();</span><br><span class="line">    abstract function buildBody();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//具体建造类实现具体业务</span><br><span class="line">class ChildBuilder extends PeopleBuilder&#123;</span><br><span class="line">    private $people;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;people = new people;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buildHead()&#123;</span><br><span class="line">       $this-&gt;people-&gt;head = &quot;this is a child&apos;s head!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function buildBody()&#123;</span><br><span class="line">       $this-&gt;people-&gt;body = &quot;this is a child&apos;s body!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function returnResult()&#123;</span><br><span class="line">       return $this-&gt;people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class AdultBuilder extends PeopleBuilder&#123;</span><br><span class="line">    private $people;</span><br><span class="line">    function __construct()&#123;</span><br><span class="line">        $this-&gt;people = new people;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buildHead()&#123;</span><br><span class="line">       $this-&gt;people-&gt;head =  &quot;this is a adult&apos;s head!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function buildBody()&#123;</span><br><span class="line">       $this-&gt;people-&gt;body =  &quot;this is a adult&apos;s body!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    function returnResult()&#123;</span><br><span class="line">       return $this-&gt;people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//指挥者，指挥者负责与调用客户端交互，决定创建什么样的产品</span><br><span class="line">class Director&#123;</span><br><span class="line">    function __construct(Peoplebuilder $builder)&#123;</span><br><span class="line">        $builder-&gt;buildHead();</span><br><span class="line">        $builder-&gt;buildBody(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//测试</span><br><span class="line">$builder = new AdultBuilder();  </span><br><span class="line">$director = new Director($builder);  </span><br><span class="line">$person = $builder-&gt;returnResult(); </span><br><span class="line">//this is a adult&apos;s head! this is a adult&apos;s body!</span><br></pre></td></tr></table></figure><h3 id="数据访问对象模式"><a class="header-anchor" href="#数据访问对象模式"></a>数据访问对象模式</h3><blockquote><p>数据访问对象设计模式描述了如何创建提供透明访问任何数据源的对象</p></blockquote><p>数据访问对象封装了创建SQL调用、减少实例创建的复杂性和重复以及更新进程的智能方式，其编写方式应当是：该对象的使用者不会知道实际使用的表结构和数据库引擎。</p><p>管理数据访问对象类中简单性的一个好办法是创建父-子关系。首先，创建一个基本的父对象。这个对象应当负责数据库连接、抽象地执行查询以及与子对象通信。使用数据访问对象设计模式时，最好开始就将一对一关系的子类与数据库中的表相关联。这些子类具有必不可少的信息，如表名和主键。此外，子类可能包含一些特定的公共方法，这些方法通过只对子类有意义的方式执行父类的查询</p><h4 id="代码示例-v3"><a class="header-anchor" href="#代码示例-v3"></a>代码示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">*MySQL数据库拥有一条记录，该记录包含对每个用户来说都是具体和特有的信息。这种功能性必须允许我们通过用户的主键或对用户名称的查找返回一个用户。此外，我们必须能够对用户实体记录的任意字段执行更新操作。</span><br><span class="line">*针对此需求，需要使用两个类：第一个类应当是基本数据访问对象类，它具有获取和更新数据方法：</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">abstract class baseDAO&#123;</span><br><span class="line">    private $__connection;</span><br><span class="line">    </span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;__connectionToDB(DB_USER,DB_PASS,DB_HOST,DB_DATABASE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function __connectToDB($user,$pass,$host,$database)&#123;</span><br><span class="line">        $this-&gt;__connection = mysql_connection($host,$user,$pass);</span><br><span class="line">        mysql_select_db($database,$this-&gt;__connection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function fetch($vale,$key = NULL)&#123;</span><br><span class="line">        if(is_null($key))&#123;</span><br><span class="line">            $key = $this-&gt;_primaryKey;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $sql = &quot;select * from &#123;$this-&gt;_tablename&#125; where &#123;$key&#125; = &apos;&#123;$value&#125;&apos;&quot;;</span><br><span class="line"></span><br><span class="line">        $results = mysql_query($sql,$this-&gt;__connection);</span><br><span class="line"></span><br><span class="line">        $rows = array();</span><br><span class="line"></span><br><span class="line">        while($result = mysql_fetch_array($results))&#123;</span><br><span class="line">            $rows[] = $result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return $rows;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    public function update($keyedArray)&#123;</span><br><span class="line">        $sql = &quot;update &#123;$this-&gt;_tableName&#125; set &quot;;</span><br><span class="line">        $updates = array();</span><br><span class="line"></span><br><span class="line">        foreach($keyedArray as $column =&gt;$value)&#123;</span><br><span class="line">            $updates[] = &quot;&#123;$column&#125; = &apos;&#123;$value&#125;&apos;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        $sql .= implode(&apos;,&apos;,$updates);</span><br><span class="line">        $sql .= &quot; where &#123;$this-&gt;_primaryKey&#125; = &apos;&#123;$keyedArray[$this-&gt;_primaryKey]&#125;&apos;&quot;;</span><br><span class="line"></span><br><span class="line">        mysql_query($sql,$this-&gt;__connection);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*这是一个抽象类，为了能够使用该类必须扩展该类。</span><br><span class="line">*因为很可能会同时打开多个数据库连接，所以在数据访问对象类中存储内部的数据库连接并且每个查询都进行引用是十分重要的。这个数据访问对象类应当唯一地引用自其自己的连接。通常，在更多可拓展的模型中，接口被创建用于共享连接。</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">*任何子类都可以任意扩展这个抽象类：</span><br><span class="line">*/</span><br><span class="line">class UserDAO extends baseDAO&#123;</span><br><span class="line">    protected $_tableName = &quot;userTable&quot;;</span><br><span class="line">    protected $_primaryKey = &apos;id&apos;;</span><br><span class="line"></span><br><span class="line">    public function getUserByFirstName($name)&#123;</span><br><span class="line">        $result = $this-&gt;fetch($name,&apos;firstName&apos;);</span><br><span class="line">        return $result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 为了获得一个起作用的数据访问对象子实体，至少需要定义两个受保护变量。</span><br><span class="line">// 要使用的数据访问对象的示例：</span><br><span class="line"></span><br><span class="line">define(&apos;DB_USER&apos;,&apos;user&apos;);</span><br><span class="line">define(&apos;DB_PASS&apos;,&apos;pass&apos;);</span><br><span class="line">define(&apos;DB_HOST&apos;,&apos;localhost&apos;);</span><br><span class="line">define(&apos;DB_DATABASE&apos;,&apos;test&apos;);</span><br><span class="line"></span><br><span class="line">$user = new userDAO();</span><br><span class="line">$userDetailsArray = $user-&gt;fetch(1);</span><br><span class="line"></span><br><span class="line">$updates = array(&apos;id&apos;=&gt;1,&apos;firstName&apos;=&gt;&apos;aaron&apos;);</span><br><span class="line">$user-&gt;update($updates);</span><br><span class="line"></span><br><span class="line">$allAarons = $user-&gt;getUserByFirstName(&apos;aaron&apos;);</span><br></pre></td></tr></table></figure><h3 id="装饰器模式"><a class="header-anchor" href="#装饰器模式"></a>装饰器模式</h3><blockquote><p>如果已有对象的部分内容或功能性发生改变，但是不需要修改原始对象的结构，那么使用装饰器设计模式最适合。</p></blockquote><p>装饰器设计模式适用于编程人员花费大量时间所处的下列工作场合：变化是快速和细小的，而且几乎不影响应用程序的其余部分。使用装饰器设计模式设计类的目的是：不必重写任何已有的功能性，而是对某个基对象应用增量变化。装饰器采用这样的构建方式：在主代码流中应当能够直接插入一个或多个更改或“装饰”目标对象的装饰器，同时不影响其他代码流。</p><h4 id="关系说明-v3"><a class="header-anchor" href="#关系说明-v3"></a>关系说明</h4><ol><li>MyObject是具有现有功能性的基类。这个类包含名为items的公共数组和名为show ItemsFormatted()的公共方法。</li><li>showltemsFormatted()方法负责接受items数组，并且使用预定义的功能性格式化该数组后提交输出。</li><li>MyObjectDecorator类包含MyObject 的一个私有实例和两个公共方法: MyoObjec-Decorator()和decorateItems()。</li><li>MyobjcDecoratol )方法代表构造函数，它接受^个MyObjcet 类型参数并将其存储在内部。</li><li>dortetfer )方法可修改Myobjcet 实例的tems数组。</li></ol><h4 id="代码示例-v4"><a class="header-anchor" href="#代码示例-v4"></a>代码示例</h4><ol><li><p>《PHP设计模式》里面的一个案例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">// 被修饰类 现在的需求： 要求能够动态为CD添加音轨、能显示CD音轨列表。 显示时应采用单行并且为每个音轨都以音轨好为前缀。</span><br><span class="line"> </span><br><span class="line">class CD &#123;</span><br><span class="line">    public $trackList;</span><br><span class="line"> </span><br><span class="line">    function __construct()   &#123;</span><br><span class="line">        # code...</span><br><span class="line">        $this-&gt;trackList=array();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function addTrack($track)&#123;</span><br><span class="line">        $this-&gt;trackList[]=$track;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function getTrackList()&#123;</span><br><span class="line">        $output=&quot; &quot;;</span><br><span class="line">        foreach ($this-&gt;trackList as $key =&gt; $value) &#123;</span><br><span class="line">            # code...</span><br><span class="line">            $output.=($key+1).&quot;) &#123;$value&#125;. &quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        return $output;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 现在需求发生变化： 要求将当前实例输出的音轨都采用大写形式。 这个需求并不是一个变化特别大的需求，不需要修改基类或创建一个父子关系的子类，此时创建一个基于装饰器模式的装饰器类。</span><br><span class="line"></span><br><span class="line">class CDTrackListDecoratorCaps&#123;</span><br><span class="line">    private $_cd;</span><br><span class="line"> </span><br><span class="line">    public function __construct(CD $CD)&#123;</span><br><span class="line">        $this-&gt;_cd=$CD;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function makeCaps()&#123;</span><br><span class="line">        foreach ($this-&gt;_cd-&gt;trackList as $key =&gt; $value) &#123;</span><br><span class="line">            # code...</span><br><span class="line">            $this-&gt;_cd-&gt;trackList[$key]=strtoupper($value); //转换成大写</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//客户端测试</span><br><span class="line">$myCD=new CD();</span><br><span class="line">$trackList=array(   &quot;what It Means&quot;,   &quot;brr&quot;,   &quot;goodBye&quot;  );</span><br><span class="line">foreach ($trackList as $key =&gt; $value) &#123;</span><br><span class="line">    # code...</span><br><span class="line">    $myCD-&gt;addTrack($value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$myCDCaps=new CDTrackListDecoratorCaps($myCD);</span><br><span class="line">$myCDCaps-&gt;makeCaps();</span><br><span class="line">print &quot;The CD contains the following tracks:&quot;.$myCD-&gt;getTrackList();</span><br></pre></td></tr></table></figure></li><li><p>REST 服务提供 JSON 和 XML 装饰器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">RendererInterface.php</span><br><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">namespace DesignPatterns\Structural\Decorator;</span><br><span class="line"></span><br><span class="line">interface RendererInterface</span><br><span class="line">&#123;</span><br><span class="line">    public function renderData();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Webservice.php</span><br><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">namespace DesignPatterns\Structural\Decorator;</span><br><span class="line"></span><br><span class="line">class Webservice implements RendererInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $data;</span><br><span class="line"></span><br><span class="line">    public function __construct($data)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;data = $data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function renderData()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Decorator.php</span><br><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">namespace DesignPatterns\Structural\Decorator;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * 装饰器必须实现 RendererInterface 接口, 这是装饰器模式的主要特点，</span><br><span class="line"> * 否则的话就不是装饰器而只是个包裹类</span><br><span class="line"> */</span><br><span class="line">abstract class Decorator implements RendererInterface</span><br><span class="line">&#123;</span><br><span class="line">    protected $wrapped;</span><br><span class="line"> </span><br><span class="line">    /**</span><br><span class="line">     * 必须类型声明装饰组件以便在子类中可以调用renderData()方法</span><br><span class="line">     * @param RendererInterface $wrappable</span><br><span class="line">     */</span><br><span class="line">    public function __construct(RendererInterface $wrappable)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;wrapped = $wrappable;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">RenderInXml.php</span><br><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">namespace DesignPatterns\Structural\Decorator;</span><br><span class="line"></span><br><span class="line">class RenderInXml extends Decorator</span><br><span class="line">&#123;</span><br><span class="line">    public function renderData()</span><br><span class="line">    &#123;</span><br><span class="line">        $output = $this-&gt;wrapped-&gt;renderData();</span><br><span class="line"> </span><br><span class="line">        // do some fancy conversion to xml from array ...</span><br><span class="line"> </span><br><span class="line">        $doc = new \DOMDocument();</span><br><span class="line"> </span><br><span class="line">        foreach ($output as $key =&gt; $val) &#123;</span><br><span class="line">            $doc-&gt;appendChild($doc-&gt;createElement($key, $val));</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        return $doc-&gt;saveXML();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">RenderInJson.php</span><br><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">namespace DesignPatterns\Structural\Decorator;</span><br><span class="line"></span><br><span class="line">class RenderInJson extends Decorator</span><br><span class="line">&#123;</span><br><span class="line">    public function renderData()</span><br><span class="line">    &#123;</span><br><span class="line">        $output = $this-&gt;wrapped-&gt;renderData();</span><br><span class="line">        return json_encode($output);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Tests/DecoratorTest.php</span><br><span class="line">&lt;?php</span><br><span class="line"> </span><br><span class="line">namespace DesignPatterns\Structural\Decorator\Tests;</span><br><span class="line"> </span><br><span class="line">use DesignPatterns\Structural\Decorator;</span><br><span class="line"> </span><br><span class="line">/**</span><br><span class="line"> * DecoratorTest 用于测试装饰器模式</span><br><span class="line"> */</span><br><span class="line">class DecoratorTest extends \PHPUnit_Framework_TestCase</span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    protected $service;</span><br><span class="line"> </span><br><span class="line">    protected function setUp()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;service = new Decorator\Webservice(array(&apos;foo&apos; =&gt; &apos;bar&apos;));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function testJsonDecorator()</span><br><span class="line">    &#123;</span><br><span class="line">        // Wrap service with a JSON decorator for renderers</span><br><span class="line">        $service = new Decorator\RenderInJson($this-&gt;service);</span><br><span class="line">        // Our Renderer will now output JSON instead of an array</span><br><span class="line">        $this-&gt;assertEquals(&apos;&#123;&quot;foo&quot;:&quot;bar&quot;&#125;&apos;, $service-&gt;renderData());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    public function testXmlDecorator()</span><br><span class="line">    &#123;</span><br><span class="line">        // Wrap service with a XML decorator for renderers</span><br><span class="line">        $service = new Decorator\RenderInXml($this-&gt;service);</span><br><span class="line">        // Our Renderer will now output XML instead of an array</span><br><span class="line">        $xml = &apos;&lt;?xml version=&quot;1.0&quot;?&gt;&lt;foo&gt;bar&lt;/foo&gt;&apos;;</span><br><span class="line">        $this-&gt;assertXmlStringEqualsXmlString($xml, $service-&gt;renderData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;适配器模式&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;适配器设计模式只是将某个对象的接口适配为另外一个对象所期望的接口&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当添加新功能时，功能要求采用不同的方式使用现有的对象，而不是采用远行设计的方式，可以采用适配器模式构建另一个对象的方案。&lt;/p&gt;
&lt;p&gt;同时，适配器设计模式也是针对数据源改变的优秀解决方案，常见有&lt;code&gt;改变数据库引擎&lt;/code&gt;和&lt;code&gt;第三方提供数据格式变化&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&quot;关系说明&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#关系说明&quot;&gt;&lt;/a&gt;关系说明&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;MyObject类包含一个名为 methodA()的公共方法。OriginalConsumer类获取MyObject的一个实例，并且在执行其doSomthing()函数期间调用methodA()&lt;/li&gt;
&lt;li&gt;引入NewConsumer类。这个类的doSomthing( )函数在执行期间期望调用MyObject实例的一个公共方法: methodB()&lt;/li&gt;
&lt;li&gt;通过扩展MyObject类创建MyObjectAdapterForNewConsumer类。像NewConsumer期望的样，新创建的类会提供名为methodB()的公共方法。在这个简单的示例中，所有methodB()都会调用methodA()&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="设计模式" scheme="https://abcdkyd.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="php" scheme="https://abcdkyd.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>markdown添加目录</title>
    <link href="https://abcdkyd.github.io/2018/12/29/markdown%E6%B7%BB%E5%8A%A0%E7%9B%AE%E5%BD%95/"/>
    <id>https://abcdkyd.github.io/2018/12/29/markdown添加目录/</id>
    <published>2018-12-29T09:07:48.000Z</published>
    <updated>2019-04-07T03:34:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于GitHub项目：<a href="https://github.com/ekalinin/github-markdown-toc" target="_blank" rel="noopener">https://github.com/ekalinin/github-markdown-toc</a></p><ol><li>安装执行文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc</span><br><span class="line">// curl -O https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc</span><br><span class="line">chmod a+x gh-md-toc</span><br></pre></td></tr></table></figure><ol start="2"><li>生成目录输出到命令行</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">./gh-md-toc ~/README.md</span><br><span class="line"></span><br><span class="line">Table of Contents</span><br><span class="line">=================</span><br><span class="line"></span><br><span class="line">  * [Dockerfile.vim](#dockerfilevim)</span><br><span class="line">  * [Screenshot](#screenshot)</span><br><span class="line">  * [Installation](#installation)</span><br><span class="line">        * [OR using Pathogen:](#or-using-pathogen)</span><br><span class="line">        * [OR using Vundle:](#or-using-vundle)</span><br><span class="line">  * [License](#license)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;基于GitHub项目：&lt;a href=&quot;https://github.com/ekalinin/github-markdown-toc&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ekalinin/github-ma
      
    
    </summary>
    
      <category term="markdown" scheme="https://abcdkyd.github.io/categories/markdown/"/>
    
    
  </entry>
  
  <entry>
    <title>添加php额外配置，引入php扩展</title>
    <link href="https://abcdkyd.github.io/2018/12/14/%E7%AE%A1%E7%90%86php%E6%89%A9%E5%B1%95%E9%85%8D%E7%BD%AE/"/>
    <id>https://abcdkyd.github.io/2018/12/14/管理php扩展配置/</id>
    <published>2018-12-14T13:11:41.000Z</published>
    <updated>2019-07-23T03:44:54.308Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>phpinfo</code></strong> 中 <code>Scan this dir for additional .ini files</code> 配置参数是php扩展配置路径。</p><p>你可以在该路径下，配置文件结尾为<code>.ini</code>的文件作为你的额外配置参数。</p><p>我们可以利用它来更好的管理我们php的扩展的相关配置：</p><p>引用pdo_pgsql扩展<br><code>extension=&quot;/usr/local/opt/php71-pdo-pgsql/pdo_pgsql.so&quot;</code></p><h3 id="php扩展安装"><a class="header-anchor" href="#php扩展安装"></a>PHP扩展安装</h3><ol><li><p>brew、yum或者apt-get安装</p></li><li><p>使用pecl安装</p><p><strong>mac安装pecl</strong></p><ol><li><p>下载pecl <code>curl -O https://pear.php.net/go-pear.phar</code></p></li><li><p>安装pecl</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">php -d detect_unicode=0 go-pear.phar</span><br><span class="line"></span><br><span class="line">执行以上命令后会进行安装过程，会有一些配置选项：</span><br><span class="line">输入 1，将安装根目录修改为 /usr/local/pear； </span><br><span class="line">输入 4，将命令安装到 /usr/local/bin 目录； </span><br><span class="line">回车两次，其他让其默认，安装完成</span><br></pre></td></tr></table></figure></li><li><p>检测是否安装成功 <code>pear version</code></p></li></ol><p><strong>pecl安装扩展</strong></p><ol><li><code>pecl install mongodb</code></li><li>配置php.ini，通过运行 php --ini查找php.ini文件位置，然后在文件中添加<code>extension=memcached.so</code></li></ol></li><li><p>phpize安装</p><blockquote><p>phpize运行可能需要安装autoconf：<code>brew install autoconf</code></p></blockquote><ol><li><p>下载PHP扩展包：<a href="http://pecl.php.net/package-search.php" target="_blank" rel="noopener">pecl库搜索</a></p></li><li><p>解压缩并进入扩展包目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvvf redis-4.0.0.tgz</span><br><span class="line">cd redis-4.0.0</span><br></pre></td></tr></table></figure></li><li><p>执行phpize <code>phpize</code></p></li><li><p>执行./configure <code>./configure --with-php-config=/usr/bin/php-config</code></p></li><li><p><code>make &amp;&amp; make install</code>，如果出现<code>error: Cannot find OpenSSL's &lt;evp.h&gt;</code>，可以尝试加上 <code>--with-openssl-dir=/usr/local/opt/openssl@1.1</code></p></li><li><p>配置php.ini，添加so文件到ini</p></li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;code&gt;phpinfo&lt;/code&gt;&lt;/strong&gt; 中 &lt;code&gt;Scan this dir for additional .ini files&lt;/code&gt; 配置参数是php扩展配置路径。&lt;/p&gt;
&lt;p&gt;你可以在该路径下，配置文件结尾为&lt;code
      
    
    </summary>
    
      <category term="环境配置" scheme="https://abcdkyd.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="php" scheme="https://abcdkyd.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>mac下php版本切换</title>
    <link href="https://abcdkyd.github.io/2018/12/14/%E5%88%87%E6%8D%A2php%E7%89%88%E6%9C%AC/"/>
    <id>https://abcdkyd.github.io/2018/12/14/切换php版本/</id>
    <published>2018-12-14T13:11:41.000Z</published>
    <updated>2018-12-14T13:14:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="brew安装php-version"><a class="header-anchor" href="#brew安装php-version"></a>brew安装php-version</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># brew install php56</span><br><span class="line"># brew install php70</span><br><span class="line"># brew install php-version</span><br><span class="line"># source $(brew --prefix php-version)/php-version.sh</span><br><span class="line"></span><br><span class="line"># php-version</span><br><span class="line"># php-version 5.6.5</span><br></pre></td></tr></table></figure><h4 id="php开机启动"><a class="header-anchor" href="#php开机启动"></a>php开机启动</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># mkdir -p ~/Library/LaunchAgents</span><br><span class="line"># cp /usr/local/opt/php56/homebrew.mxcl.php56.plist ~/Library/LaunchAgents/</span><br><span class="line"># launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</span><br><span class="line"># launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</span><br></pre></td></tr></table></figure><h4 id="切换本机php版本"><a class="header-anchor" href="#切换本机php版本"></a>切换本机php版本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 先确认phpinfo里面的php版本，先卸载5.6的plist，在加载7.1的plist</span><br><span class="line"># launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</span><br><span class="line"># launchctl unload -w ~/Library/LaunchAgents/homebrew.mxcl.php71.plist</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;brew安装php-version&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#brew安装php-version&quot;&gt;&lt;/a&gt;brew安装php-version&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
      <category term="环境配置" scheme="https://abcdkyd.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
      <category term="php" scheme="https://abcdkyd.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>拼接多个字段的值</title>
    <link href="https://abcdkyd.github.io/2018/06/15/sql%E5%AD%97%E6%AE%B5%E6%8B%BC%E6%8E%A5%E6%9F%A5%E8%AF%A2/"/>
    <id>https://abcdkyd.github.io/2018/06/15/sql字段拼接查询/</id>
    <published>2018-06-14T17:48:48.000Z</published>
    <updated>2018-06-14T17:59:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="group-concat-函数"><a class="header-anchor" href="#group-concat-函数"></a>GROUP_CONCAT（）函数</h3><blockquote><p>GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> stylist_id,real_name,<span class="keyword">group_concat</span>(is_show,m2_stylist_show_product.id,pic_url) <span class="keyword">as</span> show_id_pic_url,<span class="keyword">max</span>(is_show) <span class="keyword">as</span> is_show</span><br></pre></td></tr></table></figure><h3 id="concat-函数"><a class="header-anchor" href="#concat-函数"></a>CONCAT（）函数</h3><blockquote><p>CONCAT（）函数用于将多个字符串连接成一个字符串。</p></blockquote><h3 id="号连接"><a class="header-anchor" href="#号连接"></a>+号连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> studentID+‘-’+studentName+<span class="string">'-'</span>+studentScore <span class="keyword">AS</span> studentInfo <span class="keyword">from</span> student</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="stuff"><a class="header-anchor" href="#stuff"></a>stuff()</h3><blockquote><p>将param1中自startIndex(SQL中都是从1开始，而非0)起，删除length个字符，然后用param2替换删掉的字符。</p></blockquote><p><code>stuff(param1, startIndex, length, param2)</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select stuff((select <span class="string">'|'</span>+studentName from student <span class="keyword">for</span> xml path (<span class="string">''</span>)),<span class="number">1</span>,<span class="number">1</span>,<span class="string">''</span>);</span><br></pre></td></tr></table></figure><ul><li><p>参数</p><ul><li><code>param1</code>：一个字符数据表达式。param1可以是常量、变量，也可以是字符列或二进制数据列。</li><li><code>startIndex</code>：一个整数值，指定删除和插入的开始位置。如果 startIndex或 length 为负，则返回空字符串。如果startIndex比param1长，则返回空字符串。startIndex可以是 bigint 类型。</li><li><code>length</code>：一个整数，指定要删除的字符数。如果 length 比param1长，则最多删除到param1 中的最后一个字符。length 可以是 bigint 类型。</li></ul></li><li><p>返回类型</p><p>如果param1是受支持的字符数据类型，则返回字符数据。如果param1是一个受支持的 binary 数据类型，则返回二进制数据。</p></li><li><p>备注</p><p>如果结果值大于返回类型支持的最大值，则产生错误。</p><p><code>for xml path</code>有的人可能知道有的人可能不知道，其实它就是将查询结果集以XML形式展现，有了它我们可以简化我们的查询语句实现一些以前可能需要借助函数活存储过程来完成的工作。</p></li></ul><h2 id="posgresql"><a class="header-anchor" href="#posgresql"></a>posgreSQL</h2><ul><li>多字段值根据连接符拼接 <code>concat_ws(':',col_1,col_2)</code></li><li>单字段值根据连接符拼接 <code>string_agg(col_1,' \r\n ')</code></li><li>如果要将多个字段的值拼接成一个：<code>string_agg(concat_ws(':',aaa,bbb),' \r\n ' order by aaa asc) as xxx</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;group-concat-函数&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#group-concat-函数&quot;&gt;&lt;/a&gt;GROUP_CONCAT（）函数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;GROUP_CONCAT函数返回一个字符串结果，该结果由分组中的值连接组合而成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; stylist_id,real_name,&lt;span class=&quot;keyword&quot;&gt;group_concat&lt;/span&gt;(is_show,m2_stylist_show_product.id,pic_url) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; show_id_pic_url,&lt;span class=&quot;keyword&quot;&gt;max&lt;/span&gt;(is_show) &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; is_show&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;concat-函数&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#concat-函数&quot;&gt;&lt;/a&gt;CONCAT（）函数&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;CONCAT（）函数用于将多个字符串连接成一个字符串。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;号连接&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#号连接&quot;&gt;&lt;/a&gt;+号连接&lt;/h3&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;select&lt;/span&gt; studentID+‘-’+studentName+&lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt;+studentScore &lt;span class=&quot;keyword&quot;&gt;AS&lt;/span&gt; studentInfo &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; student&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://abcdkyd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="字符串函数" scheme="https://abcdkyd.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL pl/pgsql 编写存储过程</title>
    <link href="https://abcdkyd.github.io/2018/06/15/postgres%E7%BC%96%E5%86%99%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://abcdkyd.github.io/2018/06/15/postgres编写存储过程/</id>
    <published>2018-06-14T16:49:43.000Z</published>
    <updated>2019-04-07T03:23:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本结构"><a class="header-anchor" href="#基本结构"></a>基本结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'wangzhen'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><h3 id="作用"><a class="header-anchor" href="#作用"></a>$$作用</h3><ul><li><p>函数代码在function中实际上为一个字符串，代码1和代码2等价，但代码中字符串的单引号需要写两个进行转义。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码1</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'wangzhen'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码2</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line"><span class="string">'</span></span><br><span class="line"><span class="string">declare</span></span><br><span class="line"><span class="string">   name varchar := ''wangzhen'';</span></span><br><span class="line"><span class="string">begin</span></span><br><span class="line"><span class="string">   return name;</span></span><br><span class="line"><span class="string">end   </span></span><br><span class="line"><span class="string">'</span> <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure></li><li><p>“美元符引用”书写字符串常量，使单引号、反斜线、$符等按照字面值进行解释，不需要写两个或在4个或着更多进行转义，代码3和代码4等价。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码3</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'wangzhen''blog'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码4</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := $tag$wangzhen<span class="string">'blog$tag$;</span></span><br><span class="line"><span class="string">begin</span></span><br><span class="line"><span class="string">   return name;</span></span><br><span class="line"><span class="string">end   </span></span><br><span class="line"><span class="string">$$ language plpgsql;</span></span><br></pre></td></tr></table></figure></li><li><p>$中间可以包含可选的标签，但是标签要成对出现，且大小写敏感。代码5和代码6和代码7等价。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码5</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line">$<span class="keyword">body</span>$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := $tag$wangzhen<span class="string">'blog$tag$;</span></span><br><span class="line"><span class="string">begin</span></span><br><span class="line"><span class="string">   return name;</span></span><br><span class="line"><span class="string">end   </span></span><br><span class="line"><span class="string">$body$ language plpgsql ;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码6</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line">$func$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := $$wangzhen<span class="string">'blog$$;</span></span><br><span class="line"><span class="string">begin</span></span><br><span class="line"><span class="string">   return name;</span></span><br><span class="line"><span class="string">end   </span></span><br><span class="line"><span class="string">$func$ language plpgsql ;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码7</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'wangzhen''blog'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql ;</span><br></pre></td></tr></table></figure></li></ul><h3 id="代码块"><a class="header-anchor" href="#代码块"></a>代码块</h3><ul><li><p>块名可选，代码8和9等价</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码8</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line">&lt;&lt;outblock&gt;&gt;</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'wangzhen'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> outblock.name;</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码9</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'wangzhen'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure></li><li><p>块可嵌套，内层同名变量覆盖外层同名变量，可通过指定块名引用。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码10</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line">&lt;&lt;outblock&gt;&gt;</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'wangzhen'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   &lt;&lt;innerblock&gt;&gt;</span><br><span class="line">   <span class="keyword">declare</span> </span><br><span class="line">      <span class="keyword">name</span> <span class="built_in">varchar</span> := <span class="string">'xiaozhang'</span>;</span><br><span class="line">   <span class="keyword">begin</span></span><br><span class="line">      outblock.name = innerblock.name;</span><br><span class="line">   <span class="keyword">end</span>;   </span><br><span class="line">   return outblock.name;</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">abase=# select somefunc();</span><br><span class="line"> somefunc  </span><br><span class="line"><span class="comment">-----------</span></span><br><span class="line"> xiaozhang</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>函数体是一个隐藏的块，块名是函数名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码11</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc(<span class="keyword">name</span> <span class="built_in">varchar</span>) </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line">&lt;&lt;outblock&gt;&gt;</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := somefunc.name;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> outblock.name;</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">abase=# select somefunc('xiaoli');</span><br><span class="line"> somefunc </span><br><span class="line"><span class="comment">----------</span></span><br><span class="line"> xiaoli</span><br><span class="line">(1 row)</span><br></pre></td></tr></table></figure></li></ul><h3 id="命名参数"><a class="header-anchor" href="#命名参数"></a>命名参数</h3><ul><li><p>在函数声明时直接命名参数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码12</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc(newname <span class="built_in">varchar</span>) </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   <span class="keyword">name</span> <span class="built_in">varchar</span> := newname;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用别名和美元符号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码13</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc(<span class="built_in">varchar</span>,<span class="built_in">varchar</span>) </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">varchar</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   newname <span class="keyword">alias</span> <span class="keyword">for</span> $<span class="number">1</span>;</span><br><span class="line">   name varchar := newname;</span><br><span class="line">   name2 varchar := $2;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">name</span>;</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure></li></ul><h3 id="执行sql"><a class="header-anchor" href="#执行sql"></a>执行sql</h3><ul><li><p>没有返回结果的SQL可以直接执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码14</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc2() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">create</span> <span class="keyword">table</span> test1 (n_id <span class="built_in">integer</span>,c_mc <span class="built_in">varchar</span>(<span class="number">300</span>));</span><br><span class="line">   <span class="keyword">insert</span> <span class="keyword">into</span> test1 (n_id,c_mc) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'wangzhen'</span>);</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>不需要返回结果的select可以通过perform执行。perform替换select</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码15</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc3() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   perform * <span class="keyword">from</span> test1;</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码16</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc3() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   perform somefunc();</span><br><span class="line">   <span class="comment">--perform 怎么处理with和其他复杂查询？</span></span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure></li><li><p>执行动态拼接SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码17</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc3() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">var_sql <span class="built_in">varchar</span> := <span class="string">'insert into test1 values (0,'</span>||quote_literal(<span class="string">'admin'</span>)||<span class="string">')'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">execute</span> var_sql;</span><br><span class="line">   <span class="keyword">execute</span> <span class="keyword">format</span>(<span class="string">'insert into %I values (%L,%L)'</span>,<span class="string">'test1'</span>,<span class="number">2</span>,<span class="string">'xiaoniu'</span>);</span><br><span class="line"><span class="keyword">end</span>;        </span><br><span class="line">$$ language plpgsql;</span><br></pre></td></tr></table></figure></li></ul><h3 id="返回结果"><a class="header-anchor" href="#返回结果"></a>返回结果</h3><blockquote><p>返回结果分为返回标量（单行）和返回结果集合（多行）两种情况。</p></blockquote><ul><li><p>返回标量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码18</span></span><br><span class="line"><span class="comment">-- 返回单行int</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc4()</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">int</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码19</span></span><br><span class="line"><span class="comment">-- 通过out参数返回</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc4(<span class="keyword">out</span> v1 <span class="built_in">integer</span>) </span><br><span class="line"><span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   v1 := <span class="number">100</span>;</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- OUT 返回</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">FUNCTION</span> <span class="keyword">if</span> <span class="keyword">exists</span> update_products(<span class="built_in">character</span> <span class="built_in">varying</span>,<span class="built_in">character</span> <span class="built_in">varying</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> update_products(main_table_name <span class="built_in">varchar</span>, child_table_name <span class="built_in">varchar</span>, <span class="keyword">OUT</span> <span class="keyword">success</span> <span class="built_in">int</span>, <span class="keyword">OUT</span> <span class="keyword">error</span> <span class="built_in">int</span>) <span class="keyword">returns</span> setof <span class="built_in">record</span> <span class="keyword">as</span></span><br><span class="line">$<span class="keyword">body</span>$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  rec_record <span class="built_in">record</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">success</span> := <span class="number">0</span>;</span><br><span class="line">  for rec_record in <span class="keyword">select</span> * <span class="keyword">from</span> loans_category <span class="keyword">loop</span></span><br><span class="line">    <span class="keyword">success</span> := <span class="keyword">success</span> + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">  return next;</span><br><span class="line">  // r := row(main_table_name, child_table_name);  返回行数据</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line"></span><br><span class="line">$body$ language plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码20</span></span><br><span class="line"><span class="comment">-- 返回单行record 复合类型</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc4(<span class="keyword">id</span> <span class="built_in">integer</span>,mc <span class="built_in">varchar</span>) </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">record</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   r <span class="built_in">record</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   r := <span class="keyword">row</span>(<span class="keyword">id</span>,mc);</span><br><span class="line">   return r;</span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure></li><li><p>SETOF 作用</p><blockquote><p>返回结果集合（多行）时，需要使用SETOF指定</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--代码21</span></span><br><span class="line"><span class="comment">--返回单列多行</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc5()</span><br><span class="line"><span class="keyword">returns</span> setof <span class="built_in">int</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">for</span> <span class="keyword">id</span> <span class="keyword">in</span> <span class="keyword">select</span> n_id <span class="keyword">from</span> test1 </span><br><span class="line">   <span class="keyword">loop</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">next</span> <span class="keyword">id</span>;</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">   return;  </span><br><span class="line"><span class="keyword">end</span>   </span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">abase=# select somefunc5();</span><br><span class="line"> somefunc5 </span><br><span class="line"><span class="comment">-----------</span></span><br><span class="line">         1</span><br><span class="line">         1</span><br><span class="line">         0</span><br><span class="line">         0</span><br><span class="line">         2</span><br><span class="line">(5 rows)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>返回结果集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码22</span></span><br><span class="line"><span class="comment">-- 通过out参数返回</span></span><br><span class="line"><span class="comment">-- returns setof record  可以省略</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc6(<span class="keyword">out</span> <span class="keyword">id</span> <span class="built_in">integer</span>,<span class="keyword">out</span> <span class="keyword">name</span> <span class="built_in">varchar</span>)</span><br><span class="line"><span class="keyword">returns</span> setof <span class="built_in">record</span> <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span> </span><br><span class="line">   r <span class="built_in">record</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">for</span> r <span class="keyword">in</span> <span class="keyword">select</span> n_id,c_mc <span class="keyword">from</span> test1 </span><br><span class="line">   <span class="keyword">loop</span></span><br><span class="line">      <span class="keyword">id</span> := r.n_id;</span><br><span class="line">      name := r.c_mc;</span><br><span class="line">      return next;</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">loop</span>; </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">abase=# select * from somefunc6() ;</span><br><span class="line"> id |   name    </span><br><span class="line"><span class="comment">----+-----------</span></span><br><span class="line">  1 | wangzhen</span><br><span class="line">  1 | xiaozhang</span><br><span class="line">  0 | admin</span><br><span class="line">  0 | admin</span><br><span class="line">  2 | xiaoniu</span><br><span class="line">(5 rows)</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码23</span></span><br><span class="line"><span class="comment">-- 通过return next 返回自定义类型</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">type</span> test_rs <span class="keyword">as</span> (<span class="keyword">id</span> <span class="built_in">int</span>,mc <span class="built_in">varchar</span>);</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc7()</span><br><span class="line"><span class="keyword">returns</span> setof test_rs <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   r test_rs%rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">for</span> r <span class="keyword">in</span> <span class="keyword">select</span> n_id,c_mc <span class="keyword">from</span> test1</span><br><span class="line">   <span class="keyword">loop</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">next</span> r;</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">   return;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码24</span></span><br><span class="line"><span class="comment">-- 通过return query 返回自定义类型</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc7()</span><br><span class="line"><span class="keyword">returns</span> setof test_rs <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   r test_rs%rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">query</span> <span class="keyword">select</span> n_id,c_mc <span class="keyword">from</span> test1;</span><br><span class="line">   return;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码25</span></span><br><span class="line"><span class="comment">-- 通过return next返回表类型</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc7()</span><br><span class="line"><span class="keyword">returns</span> setof test1 <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   r test1%rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">for</span> r <span class="keyword">in</span> <span class="keyword">select</span> n_id,c_mc <span class="keyword">from</span> test1</span><br><span class="line">   <span class="keyword">loop</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">next</span> r;</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">   return;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码26</span></span><br><span class="line"><span class="comment">-- 通过拼接sql  return next 返回自定义类型</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc7()</span><br><span class="line"><span class="keyword">returns</span> setof test_rs <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   r test_rs%rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">for</span> r <span class="keyword">in</span> <span class="keyword">execute</span> <span class="string">'select n_id,c_mc from test1'</span></span><br><span class="line">   <span class="keyword">loop</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">next</span> r;</span><br><span class="line">   <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line">   return;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 代码26</span></span><br><span class="line"><span class="comment">-- 通过拼接sql  return query 返回自定义类型</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> somefunc7()</span><br><span class="line"><span class="keyword">returns</span> setof test_rs <span class="keyword">as</span> </span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">   r test_rs%rowtype;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">query</span> <span class="keyword">execute</span> <span class="string">'select n_id,c_mc from test1'</span>;</span><br><span class="line">   return;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>返回结果集时PostgreSQL 9.5.4，需要使用自定义类型或表类型制定返回类型，不能用record匿名类型。</p></blockquote><h3 id="循环判断"><a class="header-anchor" href="#循环判断"></a>循环判断</h3><ul><li><p>LOOP循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> testloop1() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    <span class="keyword">count</span> <span class="built_in">int</span> :=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">loop</span></span><br><span class="line">       <span class="keyword">exit</span> <span class="keyword">when</span> <span class="keyword">count</span> &gt;=<span class="number">100</span>;</span><br><span class="line">       count := count + 1;</span><br><span class="line">       raise notice 'count is %',count;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql ;</span><br></pre></td></tr></table></figure></li><li><p>WHILE循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> testloop2() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    <span class="keyword">count</span> <span class="built_in">int</span> :=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">count</span> &lt;<span class="number">100</span> <span class="keyword">loop</span></span><br><span class="line">       <span class="keyword">count</span> := <span class="keyword">count</span> + <span class="number">1</span>;</span><br><span class="line">       raise notice 'count is %',count;</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql ;</span><br></pre></td></tr></table></figure></li><li><p>FOR循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> testloop3() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">1.</span><span class="number">.100</span> <span class="keyword">loop</span></span><br><span class="line">     <span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">'count is %'</span>,i;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> testloop4() </span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="keyword">reverse</span> <span class="number">100.</span><span class="number">.1</span> <span class="keyword">by</span> <span class="number">2</span> <span class="keyword">loop</span> </span><br><span class="line">     <span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">'count is %'</span>,i;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure></li><li><p>FOREACH循环</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> testloop5()</span><br><span class="line"><span class="keyword">returns</span> <span class="built_in">void</span> <span class="keyword">as</span></span><br><span class="line">$$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">  v_arr <span class="built_in">int</span>[]:= <span class="built_in">array</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">  i int;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  foreach i <span class="keyword">in</span> <span class="built_in">array</span> v_arr <span class="keyword">loop</span></span><br><span class="line">      <span class="keyword">raise</span> <span class="keyword">notice</span> <span class="string">'count is %'</span>,i;</span><br><span class="line">  <span class="keyword">end</span> <span class="keyword">loop</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">$$ <span class="keyword">language</span> plpgsql;</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考资料"><a class="header-anchor" href="#参考资料"></a>参考资料</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- record/%ROWTYPE类型返回</span><br><span class="line">-- 返回结果集合（多行）时，需要使用SETOF指定. </span><br><span class="line">-- returns record || returns setof record</span><br><span class="line"></span><br><span class="line">DROP FUNCTION if exists update_products(character varying,character varying);</span><br><span class="line">create or replace function update_products(main_table_name varchar, child_table_name varchar) returns setof record as</span><br><span class="line">$body$</span><br><span class="line">declare</span><br><span class="line">  rec_row loans_category%rowtype;</span><br><span class="line">  rec_record record;</span><br><span class="line">BEGIN</span><br><span class="line">  for rec_row in select * from loans_category loop</span><br><span class="line">    return next rec_row;</span><br><span class="line">  end loop;</span><br><span class="line">  for rec_record in select * from loans_category loop</span><br><span class="line">    return next rec_record;</span><br><span class="line">  end loop;</span><br><span class="line">  return next;</span><br><span class="line">END;</span><br><span class="line">$body$ language plpgsql;</span><br><span class="line"></span><br><span class="line">select * from update_products();</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">to_char(timestamp, text)text把时间戳转换成字串  to_char(current_timestamp, &apos;HH12:MI:SS&apos;)</span><br><span class="line">to_char(interval, text)text把时间间隔转为字串  to_char(interval &apos;15h 2m 12s&apos;, &apos;HH24:MI:SS&apos;)</span><br><span class="line">to_char(int, text)text把整数转换成字串  to_char(125, &apos;999&apos;)</span><br><span class="line">to_char(double precision, text)text把实数/双精度数转换成字串  to_char(125.8::real, &apos;999D9&apos;)</span><br><span class="line">to_char(numeric, text)text把 numeric 转换成字串  to_char(-125.8, &apos;999D99S&apos;)</span><br><span class="line">to_date(text, text)date把字串转换成日期  to_date(&apos;05 Dec 2000&apos;, &apos;DD Mon YYYY&apos;)</span><br><span class="line">to_timestamp(text, text)timestamp with time zone  把字串转换成时间戳  to_timestamp(&apos;05 Dec 2000&apos;, &apos;DD Mon YYYY&apos;)</span><br><span class="line">to_timestamp(double precision)timestamp with time zone  把 UNIX 纪元转换成时间戳to_timestamp(200120400)</span><br><span class="line">to_number(text, text)numeric把字串转换成 numeric  to_number(&apos;12,454.8-&apos;, &apos;99G999D9S&apos;)</span><br></pre></td></tr></table></figure><ol><li>decode 用 case when a=1 then b else c end</li><li>最后一天  to_date(? +‘1 mons’::interval,‘yyyy-mm’) -1</li><li>第一天 to_date(?,‘yyyy-mm’) , date_trunc(‘month’,?)</li><li>字段别名 加上 as</li><li>子查询一定要用别名</li><li>取子树 ,postgresql需人自己写函数，或者用一些有结构特性字段如1.1,1.1.1,1.1.2  来代替</li><li>trunc(im.createdate) 可改为date_trunc(‘day’,createdate) ，date_trunc 与oracle的trunc很像,还可以<br><code>SELECT date_trunc('hour', TIMESTAMP '2001-02-16 20:38:40'); Result: 2001-02-16 20:00:00+00</code><br><code>SELECT date_trunc('year', TIMESTAMP '2001-02-16 20:38:40'); Result: 2001-01-01 00:00:00+00</code></li><li>postgres-当日, 带时分秒,now()  oracle- sysdate</li><li>postgres-当日,不带时分秒current_date,oracle  to_char(sysdate,'YYYY-MM-DD)</li><li>nvl 全部替换成 coalesce  如 coalesce(im.invoiceamount,0)</li><li>小数据位数round,例保留一位小数 用select round(2.16,1)  Result: 2.2 会四舍五入</li><li>转志数据类型用::数据类型,如to_number() 改用::numeric</li><li>如果取子树,不包含自身,使用函数时,第二个参数取2,如,getorgantree(?,2)</li><li>项目树函数第一个参数是id,其他的如果地区编码,税务机关分别有参数为编码的,如get…tree(code,level),参数为id的,如get…treebyid(id,level)</li><li>修改表时,表名不能带别名,如update taxpayer_cognizance_invoice tc   这里taxpayer_cognizance_invoice 不能带别名tc</li></ol><p>资料链接：<br><a href="http://www.postgres.cn/docs/9.4/plpgsql-control-structures.html#PLPGSQL-ERROR-TRAPPING" target="_blank" rel="noopener">PL/pgSQL 控制结构</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本结构&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#基本结构&quot;&gt;&lt;/a&gt;基本结构&lt;/h3&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; somefunc() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt; := &lt;span class=&quot;string&quot;&gt;&#39;wangzhen&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$ &lt;span class=&quot;keyword&quot;&gt;language&lt;/span&gt; plpgsql;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;作用&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#作用&quot;&gt;&lt;/a&gt;$$作用&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;函数代码在function中实际上为一个字符串，代码1和代码2等价，但代码中字符串的单引号需要写两个进行转义。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;-- 代码1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;replace&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; somefunc() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;returns&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;declare&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt; := &lt;span class=&quot;string&quot;&gt;&#39;wangzhen&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;begin&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$$ &lt;span class=&quot;keyword&quot;&gt;language&lt;/span&gt; plpgsql;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://abcdkyd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="PostgreSQL" scheme="https://abcdkyd.github.io/tags/PostgreSQL/"/>
    
      <category term="存储过程" scheme="https://abcdkyd.github.io/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL pgcrypto模块加密解密函数</title>
    <link href="https://abcdkyd.github.io/2018/06/15/%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E5%88%97/"/>
    <id>https://abcdkyd.github.io/2018/06/15/创建虚拟列/</id>
    <published>2018-06-14T16:49:43.000Z</published>
    <updated>2019-05-07T03:05:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pgcrypto-模块"><a class="header-anchor" href="#pgcrypto-模块"></a>pgcrypto 模块</h3><blockquote><p>加密后返回二进制的数据</p></blockquote><ol><li><p>加密解密函数</p><p><code>encrypt(data bytea, key bytea, type text) returns bytea</code></p><p><code>decrypt(data bytea, key bytea, type text) returns bytea</code></p><p>例子：</p><p><code>encrypt(data, 'fooz', 'bf-cbc/pad:pkcs')</code></p><p><code>encrypt('this is a message', 'key', 'aes-ecb')</code></p><p><code>decrypt('\x39c3c665757a0ff973b83fb98cc3d63f', 'key', 'aes-ecb')</code></p></li><li><p>类型转换</p><blockquote><p>pgcrypto模块加密出来的二进制数据，转换成base64后与PHP加密的结果。</p></blockquote><p><code>encode(data bytea, type text)</code></p><p><code>decode(string text, type text)</code></p><blockquote><p>aes解密是自动识别 aes128, aes192, aes256，aes加密默认是aes128，暂时没发现怎么指定位数</p></blockquote><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL加密</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">encrypt</span>(<span class="string">'123456'</span>,<span class="string">'haha'</span>, <span class="string">'aes-ecb'</span>);</span><br><span class="line">          encrypt               </span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"> \xd6d01c6ac3ff0353ff1ccf9204f149c5</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">encode</span>(<span class="string">'\xd6d01c6ac3ff0353ff1ccf9204f149c5'</span>, <span class="string">'base64'</span>);</span><br><span class="line">          encode          </span><br><span class="line"><span class="comment">--------------------------</span></span><br><span class="line"> 1tAcasP/A1P/HM+SBPFJxQ==</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PHP</span></span><br><span class="line">echo openssl_encrypt('123456', 'AES-128-ECB', 'haha');</span><br><span class="line">1tAcasP/A1P/HM+SBPFJxQ==</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- PostgreSQL解密</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">decrypt</span>(<span class="string">'\xd6d01c6ac3ff0353ff1ccf9204f149c5'</span>,<span class="string">'haha'</span>, <span class="string">'aes-ecb'</span>);</span><br><span class="line">    decrypt     </span><br><span class="line"><span class="comment">----------------</span></span><br><span class="line"> \x313233343536</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 转换为utf8</span></span><br><span class="line"><span class="keyword">select</span> convert_from(<span class="string">'\x313233343536'</span>, <span class="string">'SQL_ASCII'</span>);</span><br><span class="line">   convert_from </span><br><span class="line"><span class="comment">--------------</span></span><br><span class="line">   123456</span><br><span class="line"></span><br><span class="line"><span class="comment">-- bytea转字符串：</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">encode</span>(<span class="string">'\x00'</span>,<span class="string">'escape'</span>);</span><br></pre></td></tr></table></figure></li></ol><h3 id="php-加密解密函数"><a class="header-anchor" href="#php-加密解密函数"></a>php 加密解密函数</h3><blockquote><p>以指定的方式和 key 加密数据，返回原始或 base64 编码后的字符串。</p></blockquote><ul><li><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string openssl_encrypt ( string $data , string $method , string $key [, int $options = <span class="number">0</span> [, string $iv = <span class="string">""</span> [, string &amp;$tag = <span class="keyword">NULL</span> [, string $aad = <span class="string">""</span> [, int $tag_length = <span class="number">16</span> ]]]]] )</span><br></pre></td></tr></table></figure></li><li><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string openssl_decrypt ( string $data , string $method , string $key [, int $options = <span class="number">0</span> [, string $iv = <span class="string">""</span> [, string $tag = <span class="string">""</span> [, string $aad = <span class="string">""</span> ]]]] )</span><br></pre></td></tr></table></figure></li></ul><p>例子：</p><p><code>openssl_encrypt($data, 'AES-256-ECB', $key);</code></p><p><code>openssl_decrypt($data, 'AES-256-ECB', $key);</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 解密函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">function</span> userInfoDecrypt(encrypted_data <span class="built_in">varchar</span>) <span class="keyword">returns</span> <span class="built_in">text</span> <span class="keyword">as</span> </span><br><span class="line">$<span class="keyword">body</span>$</span><br><span class="line"><span class="keyword">declare</span></span><br><span class="line">    <span class="keyword">key</span> bytea := <span class="string">'PVrW9sRqsT37cJhnqxgcHWvbCrsjcRRT'</span>;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">return</span> convert_from(<span class="keyword">decrypt</span>(<span class="keyword">decode</span>(encrypted_data, <span class="string">'base64'</span>), <span class="keyword">key</span>, <span class="string">'aes-ecb'</span>), <span class="string">'SQL_ASCII'</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line">$body$ language plpgsql;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pgcrypto-模块&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#pgcrypto-模块&quot;&gt;&lt;/a&gt;pgcrypto 模块&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;加密后返回二进制的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;加密解密函数&lt;/p&gt;
&lt;p&gt;&lt;code&gt;encrypt(data bytea, key bytea, type text) returns bytea&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;decrypt(data bytea, key bytea, type text) returns bytea&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例子：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;encrypt(data, &#39;fooz&#39;, &#39;bf-cbc/pad:pkcs&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;encrypt(&#39;this is a message&#39;, &#39;key&#39;, &#39;aes-ecb&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;decrypt(&#39;\x39c3c665757a0ff973b83fb98cc3d63f&#39;, &#39;key&#39;, &#39;aes-ecb&#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类型转换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pgcrypto模块加密出来的二进制数据，转换成base64后与PHP加密的结果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;encode(data bytea, type text)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;decode(string text, type text)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;aes解密是自动识别 aes128, aes192, aes256，aes加密默认是aes128，暂时没发现怎么指定位数&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://abcdkyd.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="PostgreSQL" scheme="https://abcdkyd.github.io/tags/PostgreSQL/"/>
    
      <category term="pgcrypto" scheme="https://abcdkyd.github.io/tags/pgcrypto/"/>
    
  </entry>
  
  <entry>
    <title>lnmp环境搭建</title>
    <link href="https://abcdkyd.github.io/2018/05/31/%E9%85%8D%E7%BD%AElnmp/"/>
    <id>https://abcdkyd.github.io/2018/05/31/配置lnmp/</id>
    <published>2018-05-31T14:09:43.000Z</published>
    <updated>2019-04-07T03:32:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="centos6-5"><a class="header-anchor" href="#centos6-5"></a>CentOS6.5</h3><h4 id="1-查看环境"><a class="header-anchor" href="#1-查看环境"></a>1.查看环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># cat /etc/redhat-release</span><br></pre></td></tr></table></figure><h4 id="2-关掉防火墙"><a class="header-anchor" href="#2-关掉防火墙"></a>2.关掉防火墙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># chkconfig iptables off</span><br></pre></td></tr></table></figure><h4 id="3-配置centos-6-0-第三方yum源"><a class="header-anchor" href="#3-配置centos-6-0-第三方yum源"></a>3.配置CentOS 6.0 第三方yum源</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># wget http://www.atomicorp.com/installers/atomic</span><br><span class="line"># sh ./atomic</span><br><span class="line"># yum check-update</span><br></pre></td></tr></table></figure><h4 id="4-安装开发包和库文件"><a class="header-anchor" href="#4-安装开发包和库文件"></a>4.安装开发包和库文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># yum -y install ntp make openssl openssl-devel pcre pcre-devel libpng libpng-devel libjpeg-6b libjpeg-devel-6b freetype freetype-devel gd gd-devel zlib zlib-devel gcc gcc-c++ libXpm libXpm-devel ncurses ncurses-devel libmcrypt libmcrypt-devel libxml2 libxml2-devel imake autoconf automake screen sysstat compat-libstdc++-33 curl curl-devel</span><br></pre></td></tr></table></figure><h4 id="5-卸载已安装的apache-mysql-php"><a class="header-anchor" href="#5-卸载已安装的apache-mysql-php"></a>5.卸载已安装的apache、mysql、php</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># yum remove httpd</span><br><span class="line"># yum remove mysql</span><br><span class="line"># yum remove php</span><br></pre></td></tr></table></figure><h4 id="6-安装nginx"><a class="header-anchor" href="#6-安装nginx"></a>6.安装nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># yum install nginx</span><br><span class="line"># service nginx start</span><br><span class="line"># chkconfig --levels 235 nginx on</span><br><span class="line">//设2、3、5级别开机启动</span><br></pre></td></tr></table></figure><h4 id="7-安装mysql"><a class="header-anchor" href="#7-安装mysql"></a>7.安装mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># yum install mysql mysql-server mysql-devel</span><br><span class="line"># service mysqld start</span><br><span class="line"># chkconfig --levels 235 mysqld on</span><br><span class="line"></span><br><span class="line">登陆MySQL删除空用户，修改root密码</span><br><span class="line">mysql&gt;select user,host,password from mysql.user;</span><br><span class="line"> </span><br><span class="line">mysql&gt;drop user &apos;&apos;@localhost;</span><br><span class="line"> </span><br><span class="line">mysql&gt;update mysql.user set password = PASSWORD(&apos;*********&apos;) where user=&apos;root&apos;;</span><br><span class="line"> </span><br><span class="line">mysql&gt;flush privileges;</span><br></pre></td></tr></table></figure><h4 id="8-安装php"><a class="header-anchor" href="#8-安装php"></a>8.安装php</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># yum install php lighttpd-fastcgi php-cli php-mysql php-gd php-imap php-ldap php-odbc php-pear php-xml php-xmlrpc php-mbstring php-mcrypt php-mssql php-snmp php-soap</span><br><span class="line"></span><br><span class="line"># yum install php-tidy php-common php-devel php-fpm php-mysql</span><br><span class="line"># service php-fpm start</span><br><span class="line"># chkconfig --levels 235 php-fpm on</span><br></pre></td></tr></table></figure><h4 id="9-配置nginx支持php"><a class="header-anchor" href="#9-配置nginx支持php"></a>9.配置nginx支持php</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">在 /etc/nginx 下添加文件夹vhost，修改nginx.conf，在最后添加 “include vhost/*.conf;”</span><br><span class="line"></span><br><span class="line">在vhost里面添加新增的配置</span><br><span class="line"></span><br><span class="line">test.conf 如下：</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name test.local;</span><br><span class="line">    </span><br><span class="line">    charset utf-8;</span><br><span class="line">    access_log /usr/local/var/log/nginx/test.local.access.log;</span><br><span class="line">    error_log /usr/local/var/log/nginx/test.local.error.log;</span><br><span class="line">    </span><br><span class="line">    root /Users/vin/Code/test;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">         autoindex on;</span><br><span class="line">     autoindex_exact_size off;</span><br><span class="line">     autoindex_localtime on;</span><br><span class="line">     try_files $uri $uri/ /index.php?$args;</span><br><span class="line">     index index.html index.htm index.php;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">         fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">         fastcgi_index index.php;</span><br><span class="line">         fastcgi_param SCRIPT_FILENAME /Users/vin/Code/test$fastcgi_script_name;</span><br><span class="line">         include fastcgi_params;</span><br><span class="line">         try_files $uri =404;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-重启nginx-php-fpm"><a class="header-anchor" href="#10-重启nginx-php-fpm"></a>10.重启nginx php-fpm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># service nginx restart</span><br><span class="line"># service php-fpm restart</span><br></pre></td></tr></table></figure><h3 id="ubuntu"><a class="header-anchor" href="#ubuntu"></a>Ubuntu</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-get update // 更新apt-get</span><br></pre></td></tr></table></figure><h4 id="1-nginx"><a class="header-anchor" href="#1-nginx"></a>1.Nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-get install nginx</span><br><span class="line">// 启动nginx</span><br><span class="line"># sudo /etc/init.d/nginx start </span><br><span class="line"># sudo service nginx start</span><br><span class="line"></span><br><span class="line">// 用socket进行通讯</span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">    include snippets/fastcgi-php.conf;</span><br><span class="line">    # With php7.0-cgi alone:</span><br><span class="line">    # fastcgi_pass 127.0.0.1:9000;</span><br><span class="line">    # With php7.0-fpm:</span><br><span class="line">    fastcgi_pass unix:/run/php/php7.1-fpm.sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 然后再修改 PHP-FPM的配置文件 /etc/php/7.1/fpm/pool.d </span><br><span class="line">;  与 Nginx监听同一个 sock</span><br><span class="line">listen = /run/php/php7.1-fpm.sock</span><br></pre></td></tr></table></figure><h4 id="2-安装-php-7-1-与-php7-1-fpm"><a class="header-anchor" href="#2-安装-php-7-1-与-php7-1-fpm"></a>2.安装 PHP 7.1 与 PHP7.1-FPM</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-add-repository ppa:ondrej/php   //使用PPA ppa:ondrej/php 库</span><br><span class="line"># sudo apt-get update</span><br><span class="line"># sudo apt-get install php7.1 php7.1-fpm</span><br><span class="line"></span><br><span class="line">// php必备模块</span><br><span class="line"># apt-get install php7.1-curl php7.1-xml php7.1-mcrypt php7.1-json php7.1-gd php7.1-mbstring</span><br></pre></td></tr></table></figure><h4 id="3-安装mysql"><a class="header-anchor" href="#3-安装mysql"></a>3.安装Mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo apt-get –y install MySQL-server mysql-client php7.1-mysql</span><br></pre></td></tr></table></figure><h3 id="mac"><a class="header-anchor" href="#mac"></a>Mac</h3><h4 id="1-安装homebrew"><a class="header-anchor" href="#1-安装homebrew"></a>1.安装Homebrew</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 需要客户端安装ruby</span><br><span class="line"># ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h4 id="2-安装-nginx-服务器"><a class="header-anchor" href="#2-安装-nginx-服务器"></a>2.安装 Nginx 服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># brew install nginx</span><br><span class="line"></span><br><span class="line">// 需要安装其他版本的nginx可以用以下命令来修改内容</span><br><span class="line"># brew edit nginx</span><br><span class="line"></span><br><span class="line">// 启动 nginx服务</span><br><span class="line"># sudo nginx</span><br><span class="line"></span><br><span class="line">// 重新加载配置|重启|停止|退出 nginx</span><br><span class="line"># nginx -s reload|reopen|stop|quit</span><br><span class="line"></span><br><span class="line">// 测试配置是否有语法错误</span><br><span class="line"># nginx -t</span><br><span class="line"></span><br><span class="line">// 指定某个配置文件启动</span><br><span class="line"># nginx -c /usr/local/etc/nginx/nginx.conf</span><br><span class="line"></span><br><span class="line">// 开机自启动nginx服务设置</span><br><span class="line"># mkdir -p ~/Library/LaunchAgents</span><br><span class="line"># cp /usr/local/Cellar/nginx/1.10.0/homebrew.mxcl.nginx.plist ~/Library/LaunchAgents/</span><br><span class="line"># launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.nginx.plist</span><br><span class="line"></span><br><span class="line">// 权限</span><br><span class="line"># sudo chown root:wheel /usr/local/Cellar/nginx/1.10.0/sbin/nginx</span><br><span class="line"># sudo chmod u+s /usr/local/Cellar/nginx/1.10.0/sbin/nginx</span><br></pre></td></tr></table></figure><h4 id="3-安装和配置-mysql-服务器"><a class="header-anchor" href="#3-安装和配置-mysql-服务器"></a>3.安装和配置 MySQL 服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># brew install mysql</span><br><span class="line"></span><br><span class="line">// 配置命令</span><br><span class="line"># mysql_install_db --verbose --user=`whoami` --basedir=&quot;$(brew --prefix mysql)&quot; --datadir=/usr/local/var/mysql</span><br><span class="line"># mysql_install_db --verbose --user=`whoami` --basedir=&quot;$(brew --prefix mysql)&quot; --datadir=/usr/local/var/mysql --tmpdir=/tmp</span><br><span class="line"></span><br><span class="line">// 启动</span><br><span class="line"># ps -ef | grep mysql</span><br><span class="line"># /usr/local/Cellar/mysql/5.7.12/bin/mysqld</span><br><span class="line"># which mysqld</span><br><span class="line"></span><br><span class="line">// 开机启动</span><br><span class="line"># mkdir -p ~/Library/LaunchAgents/</span><br><span class="line"># cp /usr/local/Cellar/mysql/5.7.12/homebrew.mxcl.mysql.plist ~/Library/LaunchAgents/</span><br><span class="line"># launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</span><br><span class="line"></span><br><span class="line">// 停止服务</span><br><span class="line"># launchctl unload ~/Library/LaunchAgents/homebrew.mxcl.mysql.plist</span><br></pre></td></tr></table></figure><h4 id="4-安装-php56-和-php-fpm"><a class="header-anchor" href="#4-安装-php56-和-php-fpm"></a>4.安装 PHP56 和 PHP-fpm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># brew install php56 --with-imap --with-tidy --with-debug --with-pgsql --with-mysql --with-fpm</span><br><span class="line"># brew install php70 --with-imap --with-tidy --with-debug --with-pgsql --with-mysql --with-fpm</span><br><span class="line"></span><br><span class="line"># export PATH=&quot;$(brew --prefix php56)/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line">// php－fpm开机启动 能在安装信息找到</span><br><span class="line"># mkdir -p ~/Library/LaunchAgents</span><br><span class="line"># cp /usr/local/opt/php56/homebrew.mxcl.php56.plist ~/Library/LaunchAgents/</span><br><span class="line"># launchctl load -w ~/Library/LaunchAgents/homebrew.mxcl.php56.plist</span><br><span class="line"></span><br><span class="line">// php版本切换</span><br><span class="line"># brew install php-version</span><br><span class="line"># source $(brew --prefix php-version)/php-version.sh</span><br><span class="line"># php-version//查看版本</span><br><span class="line"># php-version 5.6.5//切换版本</span><br><span class="line"></span><br><span class="line">// php扩展</span><br><span class="line"></span><br><span class="line"># brew install php56-apcu php56-intl php56-redis php56-uuid php56-zookeeper </span><br><span class="line">    php56-thrift php56-solr php56-ssh2 php56-gmagick php56-kafka php56-libevent </span><br><span class="line">    php56-imagick php56-msgpack php56-geoip php56-mcrypt php56-swoole </span><br><span class="line">    php56-scrypt php56-xdebug php56-yaf php56-yaml php56-xhprof </span><br><span class="line">    php56-memcache php56-memcached php56-gearman</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;centos6-5&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#centos6-5&quot;&gt;&lt;/a&gt;CentOS6.5&lt;/h3&gt;
&lt;h4 id=&quot;1-查看环境&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-查看环境&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="环境配置" scheme="https://abcdkyd.github.io/categories/%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    
    
  </entry>
  
  <entry>
    <title>Navicat破解方法</title>
    <link href="https://abcdkyd.github.io/2018/01/29/Navicat%E7%A0%B4%E8%A7%A3%E6%96%B9%E6%B3%95/"/>
    <id>https://abcdkyd.github.io/2018/01/29/Navicat破解方法/</id>
    <published>2018-01-29T14:55:09.000Z</published>
    <updated>2019-07-23T04:10:52.228Z</updated>
    
    <content type="html"><![CDATA[<h3 id="navicat破解方法"><a class="header-anchor" href="#navicat破解方法"></a>Navicat破解方法</h3><ol><li>下载官方试用版本</li><li>生成自己的RSA公钥私钥对，注意密钥是2048位的，PKCS#8格式，在线工具 <a href="http://web.chacuo.net/netrsakeypair" target="_blank" rel="noopener">http://web.chacuo.net/netrsakeypair</a></li><li>替换应用包内容目录中rpk文件的公钥</li><li>Mac版序列号密钥<ul><li>中文版64位密钥序列号： NAVH-T4PX-WT8W-QBL5</li><li>英文版64位密钥序列号： NAVG-UJ8Z-EVAP-JAUW</li></ul></li><li>解密激活请求码，生成激活码<ol><li>打开应用，断网！！！，点击注册，输入密钥 NAVH-T4PX-WT8W-QBL5，然后手动激活</li><li>复制离线激活请求码，使用第一步提供的私钥解密请求码</li><li>加密激活码明文，使用第一步提供的私钥加密激活码明文</li></ol></li></ol><blockquote><ul><li>在线RSA私钥解密 <a href="http://tool.chacuo.net/cryptrsaprikey" target="_blank" rel="noopener">http://tool.chacuo.net/cryptrsaprikey</a></li><li>Mac版激活码明文格式如下：{“K”:“NAVHT4PXWT8WQBL5”, “N”:“52pojie”, “O”:“<a href="http://52pojie.cn" target="_blank" rel="noopener">52pojie.cn</a>”, “DI”:“ODQ2Yjg2ZDBjMTEzMjhh”, “T”:1516939200}</li></ul></blockquote><p><code>{&quot;K&quot;:&quot;NAVHT4PXWT8WQBL5&quot;, &quot;N&quot;:&quot;vin&quot;, &quot;O&quot;:&quot;vin&quot;, &quot;DI&quot;:&quot;ZmYyZWU2NTFjMWFhOTlm&quot;, &quot;T&quot;:1517236988}</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;navicat破解方法&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#navicat破解方法&quot;&gt;&lt;/a&gt;Navicat破解方法&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;下载官方试用版本&lt;/li&gt;
&lt;li&gt;生成自己的RSA公钥私钥对，注意密钥是2048位的，
      
    
    </summary>
    
      <category term="笔记" scheme="https://abcdkyd.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Navicat" scheme="https://abcdkyd.github.io/tags/Navicat/"/>
    
  </entry>
  
  <entry>
    <title>ssh+git建立代码库</title>
    <link href="https://abcdkyd.github.io/2017/06/14/ssh+git%E5%BB%BA%E7%AB%8B%E4%BB%A3%E7%A0%81%E5%BA%93/"/>
    <id>https://abcdkyd.github.io/2017/06/14/ssh+git建立代码库/</id>
    <published>2017-06-14T03:47:09.000Z</published>
    <updated>2019-07-23T03:53:57.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-生成ssh密钥"><a class="header-anchor" href="#1-生成ssh密钥"></a>1.生成ssh密钥</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ssh-keygen -t rsa [-f test -C &quot;test key&quot;]</span><br><span class="line"></span><br><span class="line">-b：指定密钥长度； </span><br><span class="line">-e：读取openssh的私钥或者公钥文件； </span><br><span class="line">-C：添加注释； </span><br><span class="line">-f：指定用来保存密钥的文件名； </span><br><span class="line">-i：读取未加密的ssh-v2兼容的私钥/公钥文件，然后在标准输出设备上显示openssh兼容的私钥/公钥； </span><br><span class="line">-l：显示公钥文件的指纹数据； </span><br><span class="line">-N：提供一个新密语； </span><br><span class="line">-P：提供（旧）密语；</span><br><span class="line">-q：静默模式； </span><br><span class="line">-t：指定要创建的密钥类型。</span><br></pre></td></tr></table></figure><p>密钥生成在<code>.ssh</code>文件夹里面，id_rsa为私钥，id_rsa.pub为公钥</p><h3 id="2-生成裸git库"><a class="header-anchor" href="#2-生成裸git库"></a>2.生成裸git库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># sudo git init --bare sample.git</span><br></pre></td></tr></table></figure><h3 id="3-配置-ssh"><a class="header-anchor" href="#3-配置-ssh"></a>3.配置.ssh</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">//服务器新建用户git，并配置权限</span><br><span class="line"># sudo adduser git</span><br><span class="line"># sudo chown -R git:git sample.git</span><br><span class="line">//修改/etc/passwd</span><br><span class="line">git:x:1001:1001:,,,:/home/git:/bin/bash</span><br><span class="line">git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell</span><br><span class="line"></span><br><span class="line">把公钥 id_rsa.pub 内容追加到 .ssh/authorized_keys 文件里面</span><br><span class="line">vi 或者 ssh-copy-id -i ~/.ssh/id_rsa.pub &quot;-p 22 root@192.168.0.1&quot;</span><br><span class="line"></span><br><span class="line">// 配置config</span><br><span class="line">Host vin</span><br><span class="line">User vin</span><br><span class="line">Hostname 192.168.1.105</span><br><span class="line">Port 22</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host pubgit</span><br><span class="line">User pubgit</span><br><span class="line">Hostname 192.168.1.101</span><br><span class="line">Port 22</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host git-page</span><br><span class="line">User git</span><br><span class="line">Hostname www.github.com</span><br><span class="line">Port 22</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">要保证.ssh和authorized_keys都只有用户自己有写权限。否则验证无效。</span><br></pre></td></tr></table></figure><h4 id="4-连接服务器"><a class="header-anchor" href="#4-连接服务器"></a>4.连接服务器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ssh vin</span><br><span class="line"># git clone ssh://pubgit/home/pubgit/Code/uzise/uzise.git</span><br><span class="line"># git clone ssh://root@192.168.0.1:22/home/pubgit/Code/uzise/uzise.git</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-生成ssh密钥&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#1-生成ssh密钥&quot;&gt;&lt;/a&gt;1.生成ssh密钥&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="笔记" scheme="https://abcdkyd.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="https://abcdkyd.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>php面试基础整理</title>
    <link href="https://abcdkyd.github.io/2017/04/03/php-msjc/"/>
    <id>https://abcdkyd.github.io/2017/04/03/php-msjc/</id>
    <published>2017-04-03T11:16:04.000Z</published>
    <updated>2018-06-02T10:50:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="php类型转换"><a class="header-anchor" href="#php类型转换"></a>php类型转换</h3><ol><li>(int)$abc</li><li>intvel($abc)</li><li>settype($abc,”float”)</li></ol><h3 id="php-闭包-类似匿名函数"><a class="header-anchor" href="#php-闭包-类似匿名函数"></a>php 闭包 类似匿名函数</h3><h3 id="echo和print区别"><a class="header-anchor" href="#echo和print区别"></a>echo和print区别</h3><p>两者都不是函数，echo没有返回值，print只支持一个参数，print会返回true或false</p><a id="more"></a><h3 id="php数组函数"><a class="header-anchor" href="#php数组函数"></a>php数组函数</h3><ul><li><a href="http://www.w3school.com.cn/php/func_array_map.asp" target="_blank" rel="noopener">array_map()</a>把数组中的每个值发送到用户自定义函数，返回新的值</li><li><a href="http://www.w3school.com.cn/php/func_array_key_exists.asp" target="_blank" rel="noopener">array_key_exists()</a>检查指定的键名是否存在于数组中</li><li><a href="http://www.w3school.com.cn/php/func_array_merge.asp" target="_blank" rel="noopener">array_merge()</a>把一个或多个数组合并为一个数组。</li><li><a href="http://www.w3school.com.cn/php/func_array_walk.asp" target="_blank" rel="noopener">array_walk()</a>对数组中的每个成员应用用户函数</li><li><a href="http://www.w3school.com.cn/php/func_array_filter.asp" target="_blank" rel="noopener">array_filter()</a>用回调函数过滤数组中的元素。</li><li><a href="http://www.w3school.com.cn/php/func_array_reverse.asp" target="_blank" rel="noopener">array_reverse()</a>以相反的顺序返回数组。</li><li><a href="http://www.w3school.com.cn/php/func_array_in_array.asp" target="_blank" rel="noopener">in_array()</a>检查数组中是否存在指定的值。</li><li><a href="http://www.w3school.com.cn/php/func_array_sort.asp" target="_blank" rel="noopener">sort()</a>对数组排序。</li><li><a href="http://www.w3school.com.cn/php/func_array_rsort.asp" target="_blank" rel="noopener">rsort()</a>对数组逆向排序。</li><li><a href="http://www.w3school.com.cn/php/func_array_unique.asp" target="_blank" rel="noopener">array_unique()</a>删除数组中的重复值</li><li><a href="http://www.w3school.com.cn/php/func_array_extract.asp" target="_blank" rel="noopener">extract()</a>数组(对数字索引数组无效)每对key和value，生成以key为变量名、value为对应值的多组新变量。</li></ul><h3 id="正则"><a class="header-anchor" href="#正则"></a>正则</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">*  重复0次或多次</span><br><span class="line">+  重复一次或多次</span><br><span class="line">？ 重复0次或一次</span><br><span class="line"></span><br><span class="line">/&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;/    匹配HTML标记的正则表达式</span><br><span class="line"></span><br><span class="line">/^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/   匹配邮箱格式</span><br><span class="line"></span><br><span class="line">非负整数：^\d+$ </span><br><span class="line">正整数：^[0-9]*[1-9][0-9]*$ </span><br><span class="line">非正整数：^((-\d+)|(0+))$ </span><br><span class="line">负整数：^-[0-9]*[1-9][0-9]*$ </span><br><span class="line">整数：^-?\d+$ </span><br><span class="line">非负浮点数：^\d+(\.\d+)?$ </span><br><span class="line">正浮点数：^((0-9)+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$ </span><br><span class="line">非正浮点数：^((-\d+\.\d+)?)|(0+(\.0+)?))$ </span><br><span class="line">负浮点数：^(-((正浮点数正则式)))$ </span><br><span class="line">英文字符串：^[A-Za-z]+$ </span><br><span class="line">英文大写串：^[A-Z]+$ </span><br><span class="line">英文小写串：^[a-z]+$ </span><br><span class="line">英文字符数字串：^[A-Za-z0-9]+$ </span><br><span class="line">英数字加下划线串：^\w+$ </span><br><span class="line">E-mail地址：^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$ </span><br><span class="line">URL：^[a-zA-Z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\s*)?$ </span><br><span class="line">或：^http:\/\/[A-Za-z0-9]+\.[A-Za-z0-9]+[\/=\?%\-&amp;_~`@[\]\&apos;:+!]*([^&lt;&gt;\&quot;\&quot;])*$ </span><br><span class="line">邮政编码：^[1-9]\d&#123;5&#125;$ </span><br><span class="line">中文：^[\u0391-\uFFE5]+$ </span><br><span class="line">电话号码：^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?(\(0\d&#123;2,3&#125;\)|0\d&#123;2,3&#125;-)?[1-9]\d&#123;6,7&#125;(\-\d&#123;1,4&#125;)?$ </span><br><span class="line">手机号码：^((\(\d&#123;2,3&#125;\))|(\d&#123;3&#125;\-))?13\d&#123;9&#125;$ </span><br><span class="line">双字节字符(包括汉字在内)：^\x00-\xff </span><br><span class="line">匹配首尾空格：(^\s*)|(\s*$)（像vbscript那样的trim函数） </span><br><span class="line">匹配HTML标记：&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt; </span><br><span class="line">匹配空行：\n[\s| ]*\r </span><br><span class="line">提取信息中的网络链接：(h|H)(r|R)(e|E)(f|F) *= *(&apos;|&quot;)?(\w|\\|\/|\.)+(&apos;|&quot;| *|&gt;)? </span><br><span class="line">提取信息中的邮件地址：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* </span><br><span class="line">提取信息中的图片链接：(s|S)(r|R)(c|C) *= *(&apos;|&quot;)?(\w|\\|\/|\.)+(&apos;|&quot;| *|&gt;)? </span><br><span class="line">提取信息中的IP地址：(\d+)\.(\d+)\.(\d+)\.(\d+) </span><br><span class="line">提取信息中的中国手机号码：(86)*0*13\d&#123;9&#125; </span><br><span class="line">提取信息中的中国固定电话号码：(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;8&#125; </span><br><span class="line">提取信息中的中国电话号码（包括移动和固定电话）：(\(\d&#123;3,4&#125;\)|\d&#123;3,4&#125;-|\s)?\d&#123;7,14&#125; </span><br><span class="line">提取信息中的中国邮政编码：[1-9]&#123;1&#125;(\d+)&#123;5&#125; </span><br><span class="line">提取信息中的浮点数（即小数）：(-?\d*)\.?\d+ </span><br><span class="line">提取信息中的任何数字 ：(-?\d*)(\.\d+)? </span><br><span class="line">IP：(\d+)\.(\d+)\.(\d+)\.(\d+) </span><br><span class="line">电话区号：/^0\d&#123;2,3&#125;$/ </span><br><span class="line">腾讯QQ号：^[1-9]*[1-9][0-9]*$ </span><br><span class="line">帐号(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ </span><br><span class="line">中文、英文、数字及下划线：^[\u4e00-\u9fa5_a-zA-Z0-9]+$</span><br></pre></td></tr></table></figure><h3 id="php异常处理"><a class="header-anchor" href="#php异常处理"></a>php异常处理</h3><blockquote><p>error错误码1，warning错误码2，notice错误码8  出现error了系统是挂掉了，但是warning和notice是我们可以捕捉并处理的</p></blockquote><p>php.ini中的配置指令修改：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. error_reporting  =  E_ALL;//将会向PHP报告发生的每个错误   </span><br><span class="line">2. display_errors = Off;//不显示满足上条 指令所定义规则的所有错误报告   </span><br><span class="line">3. log_errors = On;//决定日志语句记录的位置   </span><br><span class="line">4. log_errors_max_len = 1024;//设置每个日志项的最大长度   </span><br><span class="line">5. error_log = /usr/local/error.log;//指定产生的 错误报告写入的日志文件位置</span><br></pre></td></tr></table></figure><h3 id="php日期处理"><a class="header-anchor" href="#php日期处理"></a>php日期处理</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">date_default_timezone_set(); 函数设置用在脚本中所有日期/时间函数的默认时区。</span><br><span class="line">date(‘Y-m-d H:i:s’);</span><br><span class="line">strtotime(‘<span class="number">2017</span><span class="number">-3</span><span class="number">-8</span> <span class="number">00</span>:<span class="number">00</span>:<span class="number">00</span>’);</span><br><span class="line">date(<span class="string">'w'</span>, strtotime(<span class="string">'2017-3-5'</span>));  <span class="comment">// 0  0是星期天</span></span><br><span class="line">date(<span class="string">'l'</span>, strtotime(<span class="string">'2017-3-5'</span>));   <span class="comment">// Sunday</span></span><br></pre></td></tr></table></figure><h3 id="php文件处理"><a class="header-anchor" href="#php文件处理"></a>php文件处理</h3><p>文件类型</p><blockquote><ul><li>char: 字符设备，I/O （输入输出中）以字符为单位的设备， 例如键盘，打印机等</li><li>dir:  目录也是文件的一种/目录文件</li><li>fifo: 信息管道，从一个程序传输到另一个进程</li><li>file: 普通的文件类型如文本文件，可执行文件</li><li>link: 链接文件，相当于windows下的快捷方式</li><li>unknown  ：未知类型</li></ul></blockquote><p>文件属性处理函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">filetype(<span class="string">"目录或文件名"</span>) 获取类型</span><br><span class="line">is_dir() -- 判断给定文件名是否是一个目录</span><br><span class="line">is_file() -- 判断给定文件名是否为一个正常的文件</span><br><span class="line">is_link() -- 判断给定文件名是否为一个符号连接</span><br><span class="line">is_executable(); -- 判断给定文件名是否可执行</span><br><span class="line">file_exists();--文件是否存在</span><br><span class="line">filesize();--返回文件大小</span><br><span class="line">is_readable();--文件是否可读</span><br><span class="line">is_writeable();--文件是否可写</span><br><span class="line">filectime();--文件创建时间</span><br><span class="line">filemtime();--文件修改时间</span><br><span class="line">fileactime();--文件最后访问时间</span><br><span class="line">stat();--文件状态，返回关于给定文件的信息的数组</span><br><span class="line">bool ftruncate ( resource handle, int size );接受文件指针 handle 作为参数，并将文件大小截取为 size。如果成功则返回 <span class="keyword">TRUE</span>，失败则返回 <span class="keyword">FALSE</span>。</span><br><span class="line">bool rename ( string oldname, string newname [, resource context] );</span><br></pre></td></tr></table></figure><p>目录</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">basename(url[,扩展名])     <span class="comment">//返回文件名</span></span><br><span class="line">dirname(url)         <span class="comment">//返回文件目录名</span></span><br><span class="line">pathinfo(url)       <span class="comment">//路径信息</span></span><br><span class="line">opendir(url);</span><br><span class="line">readdir(url);       <span class="comment">//返回当前目录指针只为的一个文件名，并将目录指针向后移动一位</span></span><br><span class="line">closedir(url);</span><br><span class="line">rewinddir(url);    <span class="comment">//把目录指针重置到开始处</span></span><br><span class="line"></span><br><span class="line">disk_free_space(url);和 disk_total_space(url);   统计磁盘大小  统计目录的大小只能建立递归函数把目录的文件都加起来；</span><br><span class="line"></span><br><span class="line">mkdir(url);<span class="comment">//建立目录</span></span><br><span class="line">rmdir(url);<span class="comment">//删除空目录</span></span><br><span class="line">unlink(url);<span class="comment">//删除文件</span></span><br><span class="line"></span><br><span class="line">copy($scrfile,$to);<span class="comment">//复制文件</span></span><br></pre></td></tr></table></figure><p>写入文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int fwrite(resoure handle,strint string[,int length]);<span class="comment">//写入文件</span></span><br><span class="line">int file_put_contents ( string filename, string data [, int flags [, resource context]] );<span class="comment">//和依次调用 fopen()，fwrite() 以及 fclose() 功能一样</span></span><br></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">string fread (resource handle, int length);</span><br><span class="line">string file_get_contents ( string filename [, bool use_include_path [, resource context [, int offset [, int maxlen]]]]);</span><br><span class="line"><span class="keyword">array</span> file (string filename [, int use_include_path [, resource context]]);</span><br><span class="line"></span><br><span class="line">string fgets (resource handle [, int length]);</span><br><span class="line">string fgetc (resource handle);</span><br><span class="line">int readfile (string filename [, bool use_include_path [, resource context]]);</span><br></pre></td></tr></table></figure><p>文件上传</p><p>获取文件后缀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">substr(strrchr($file, <span class="string">'.'</span>), <span class="number">1</span>); </span><br><span class="line">substr($file, strrpos($file, <span class="string">'.'</span>)+<span class="number">1</span>); </span><br><span class="line">end(explode(<span class="string">'.'</span>, $file)); </span><br><span class="line"></span><br><span class="line">$info = pathinfo($file);   <span class="keyword">return</span> $info[<span class="string">'extension'</span>];</span><br><span class="line"></span><br><span class="line">pathinfo($file, PATHINFO_EXTENSION);</span><br><span class="line">PATHINFO_DIRNAME - 目录 </span><br><span class="line">PATHINFO_BASENAME - 文件名（含扩展名） </span><br><span class="line">PATHINFO_EXTENSION - 扩展名 </span><br><span class="line">PATHINFO_FILENAME - 文件名（不含扩展名，PHP&gt;<span class="number">5.2</span>） </span><br><span class="line"><span class="comment">//这四个常量的值分别是1、2、4、8</span></span><br></pre></td></tr></table></figure><p>会话控制</p><blockquote><h4 id="cookie-和-session"><a class="header-anchor" href="#cookie-和-session"></a>cookie 和 session</h4><p>PHP的session会话是通过唯一的会话ID来驱动的，PHP的会话ID一般保存在用户机器的cookie中。客户端浏览器禁用cookie后会使session失效，这时可以通过改写URL的方法，就是在URL上添加会话ID来进行会话控制。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Setcookie(string name, string value, int expire,string path, string domain, int secure); </span><br><span class="line">SetCookie(&quot;Cookie&quot;, &quot;cookievalue&quot;,time()+3600, &quot;/forum&quot;, &quot;.learnphp.cn&quot;, 1);</span><br><span class="line">SetCookie(&quot;Cookie&quot;, &quot;&quot;);//删除cookie</span><br><span class="line">SetCookie(&quot;Cookie&quot;, &quot;value&quot; , time()-1 / time() );//删除cookie</span><br></pre></td></tr></table></figure><p>其中name是cookie变量名称标识，你在php中将能象使用普通变量名相同来用他引用cookie变量。value是cookie变量的初始值，expire 表示该cookie变量的有效时间；path 为该cookie变量的相关路径；domain 表示cookie变量的网站；secure 则需在 https 的安全传输时才有效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">session_start();        //初始化session.需在文件头部</span><br><span class="line">$_SESSION[name]=value;  //配置Seeeion</span><br><span class="line">echo $_SESSION[name];    //使用session</span><br><span class="line">isset($_SESSION[name]);   // 判断</span><br><span class="line">unset($_SESSION[name]);   //删除</span><br><span class="line">session_destroy()；       //消耗所有session</span><br></pre></td></tr></table></figure><h3 id="php安全处理"><a class="header-anchor" href="#php安全处理"></a>php安全处理</h3><p>防Sql注入，防止Xss攻击，防盗链，防CSRF等</p><h3 id="php字符串处理函数"><a class="header-anchor" href="#php字符串处理函数"></a>php字符串处理函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int strlen(string str)<span class="comment">// 获取字符长度</span></span><br><span class="line">string strtolower(string str)<span class="comment">// 转换成小写</span></span><br><span class="line">string strtoupper(string str)<span class="comment">// 转换成大写</span></span><br><span class="line">string ucfirst(string str)<span class="comment">// 第一个字符大写</span></span><br><span class="line">string ucword(string str)<span class="comment">// 每个单词变成大写</span></span><br><span class="line"><span class="keyword">array</span> explode(string separator,string str[,int limit])<span class="comment">// 字符转数组</span></span><br><span class="line">string implode(string delimiter, <span class="keyword">array</span> <span class="keyword">array</span>)<span class="comment">// 数组拼接成字符</span></span><br><span class="line">int strrpos(string str,char substr[,offset])<span class="comment">// 字符最后一次出现的位置</span></span><br><span class="line">mixed str_replace(string occurrence,mixed replacement,mixed str[,int count])<span class="comment">// 字符替换</span></span><br><span class="line">string substr(string str,int start[,ing length])<span class="comment">// 字符截取</span></span><br><span class="line">string trim(string str[,string charliset])<span class="comment">// 去掉两端字符</span></span><br></pre></td></tr></table></figure><h3 id="网络状态码"><a class="header-anchor" href="#网络状态码"></a>网络状态码</h3><p><strong>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态代码。</strong></p><ul><li>100 （继续） 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</li><li>101 （切换协议） 请求者已要求服务器切换协议，服务器已确认并准备切换。</li></ul><p><strong>2xx （成功）表示成功处理了请求的状态代码。</strong></p><ul><li>200 （成功） 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</li><li>201 （已创建） 请求成功并且服务器创建了新的资源。</li><li>202 （已接受） 服务器已接受请求，但尚未处理。</li><li>203 （非授权信息） 服务器已成功处理了请求，但返回的信息可能来自另一来源。</li><li>204 （无内容） 服务器成功处理了请求，但没有返回任何内容。</li></ul><p><strong>3xx （重定向）表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。</strong></p><ul><li>300 （多种选择） 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</li><li>301 （永久移动） 请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置。</li><li>302 （临时移动） 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</li><li>303 （查看其他位置） 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</li><li>304 （未修改） 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</li></ul><p><strong>4xx（请求错误）这些状态代码表示请求可能出错，妨碍了服务器的处理。</strong></p><ul><li>400 （错误请求） 服务器不理解请求的语法。</li><li>401 （未授权） 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</li><li>403 （禁止） 服务器拒绝请求。</li><li>404 （未找到） 服务器找不到请求的网页。</li><li>405 （方法禁用） 禁用请求中指定的方法。</li><li>408 （请求超时） 服务器等候请求时发生超时。</li><li>409 （冲突） 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</li></ul><p><strong>5xx（服务器错误）这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。</strong></p><ul><li>500 （服务器内部错误） 服务器遇到错误，无法完成请求。</li><li>501 （尚未实施） 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</li><li>502 （错误网关） 服务器作为网关或代理，从上游服务器收到无效响应。</li><li>503 （服务不可用） 服务器目前无法使用（由于超载或停机维护）。 通常，这只是暂时状态。</li><li>504 （网关超时） 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</li><li>505 （HTTP 版本不受支持） 服务器不支持请求中所用的 HTTP 协议版本。</li></ul><p><a href="http://tool.oschina.net/commons?type=5" target="_blank" rel="noopener">http://tool.oschina.net/commons?type=5</a></p><h3 id="url的处理函数"><a class="header-anchor" href="#url的处理函数"></a>URL的处理函数</h3><p>array parse_url (string url)<br>数组中的键值有：</p><ul><li>scheme - 如 http</li><li>host</li><li>port</li><li>user</li><li>pass</li><li>path</li><li>query - 在问号 ? 之后</li><li>fragment - 在散列符号 # 之后</li></ul><p>string parse_url(string url, PHP_URL_PATH);</p><p><code>PHP_URL_SCHEME, PHP_URL_HOST, PHP_URL_PORT, PHP_URL_USER, PHP_URL_PASS, PHP_URL_PATH, PHP_URL_QUERY or PHP_URL_FRAGMENT</code></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;php类型转换&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#php类型转换&quot;&gt;&lt;/a&gt;php类型转换&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;(int)$abc&lt;/li&gt;
&lt;li&gt;intvel($abc)&lt;/li&gt;
&lt;li&gt;settype($abc,”float”)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;php-闭包-类似匿名函数&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#php-闭包-类似匿名函数&quot;&gt;&lt;/a&gt;php 闭包 类似匿名函数&lt;/h3&gt;
&lt;h3 id=&quot;echo和print区别&quot;&gt;&lt;a class=&quot;header-anchor&quot; href=&quot;#echo和print区别&quot;&gt;&lt;/a&gt;echo和print区别&lt;/h3&gt;
&lt;p&gt;两者都不是函数，echo没有返回值，print只支持一个参数，print会返回true或false&lt;/p&gt;
    
    </summary>
    
      <category term="后端" scheme="https://abcdkyd.github.io/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="php" scheme="https://abcdkyd.github.io/tags/php/"/>
    
      <category term="面试" scheme="https://abcdkyd.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github 创建个人博客</title>
    <link href="https://abcdkyd.github.io/2017/04/03/hexo-blog/"/>
    <id>https://abcdkyd.github.io/2017/04/03/hexo-blog/</id>
    <published>2017-04-03T08:34:43.000Z</published>
    <updated>2018-06-02T12:17:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>大概流程</p><blockquote><ol><li>创建仓库，<a href="http://abcdkyd.github.io">abcdkyd.github.io</a>；</li><li>创建两个分支：master 与 hexo；</li><li>设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；</li><li>使用git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:abcdkyd/abcdkyd.github.io.git拷贝仓库；</li><li>在本地 <a href="http://abcdkyd.github.io">abcdkyd.github.io</a> 文件夹下通过Git bash依次执行npm install hexo-cli、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;</li><li>修改_config.yml中的deploy参数，分支应为master；</li><li>使用git init 、git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:sylujia/sylujia.github.io.git以及git pull命令重新关联远端库。</li><li>使用git checkout hexo命令切换到hexo分支然后依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；</li><li>执行hexo generate -d生成网站并部署到GitHub上。</li></ol></blockquote><a id="more"></a><h2 id="github"><a class="header-anchor" href="#github"></a>GitHub</h2><ol><li>创建一个仓库，命名为 <a href="http://username.github.io" target="_blank" rel="noopener">username.github.io</a>  GitHub Page类型为 User Pages</li><li>创建两个分支 master 和 hexo ，hexo为默认修改代码，master为发布代码</li><li>用 ssh 建立连接</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ssh-keygen -t rsa -C &quot;email@email.com&quot;</span><br><span class="line">添加公钥到github上</span><br><span class="line"># ssh -T git@github.com</span><br><span class="line"># git config --global user.name &quot;username&quot;</span><br><span class="line"># git config --global user.email &quot;email@email.com&quot;</span><br></pre></td></tr></table></figure><h2 id="hexo"><a class="header-anchor" href="#hexo"></a>Hexo</h2><ol><li><p>需要安装 node.js</p></li><li><p>使用hexo在本地建站</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># npm install -g hexo-cli</span><br><span class="line"># git clone git@github.com:abcdkyd/abcdkyd.github.io.git</span><br><span class="line"># cd abcdkyd.github.io.git</span><br><span class="line"># hexo init</span><br><span class="line"># npm install</span><br><span class="line"># hexo generate</span><br><span class="line"># hexo server</span><br></pre></td></tr></table></figure></li><li><p>部署博客到GitHub上修稿配置文件 _config.yml  为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repository:git@github.com:abcdkyd/abcdkyd.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li></ol><h2 id="上传和部署"><a class="header-anchor" href="#上传和部署"></a>上传和部署</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-deployer-git —save  //安装部署的插件</span><br><span class="line"># hexo clean         //清空public文件夹下生成的静态文件和db.json文件</span><br><span class="line"># hexo generate   //重新生成静态文件和db.json</span><br><span class="line"># hexo deploy      //按照站点配置文件部署到github上</span><br></pre></td></tr></table></figure><p>提交到hexo分支，由于上面执行了hexo init 命令，所以要重新关联远程库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># git init</span><br><span class="line"># git remote add origin git@github.com:abcdkyd/abcdkyd.github.io.git</span><br><span class="line"># git checkout hexo</span><br><span class="line"># git add -A</span><br><span class="line"># git commit -m &apos;blog start&apos;</span><br><span class="line"># git push origin hexo</span><br></pre></td></tr></table></figure><h2 id="更换主题"><a class="header-anchor" href="#更换主题"></a>更换主题</h2><p>如果想要使用其他主题，可以使用git clone将别人的主题拷贝到H:\<a href="http://sylujia.github.io" target="_blank" rel="noopener">sylujia.github.io</a>\themes下，然后将_config.yml中的theme: landscape改为对应的主题名字。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># git clone https://github.com/iissnan/hexo-theme-next.git themes/next</span><br><span class="line"># git clone https://github.com/litten/hexo-theme-yilia.git</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a class="header-anchor" href="#常用命令"></a>常用命令</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;postName&quot; #新建文章</span><br><span class="line">hexo new page &quot;pageName&quot; #新建页面</span><br><span class="line">hexo generate #生成静态页面至public目录</span><br><span class="line">hexo server #开启预览访问端口（默认端口4000，&apos;ctrl + c&apos;关闭server）</span><br><span class="line">hexo deploy #部署到GitHub</span><br><span class="line">hexo help  # 查看帮助</span><br><span class="line">hexo version  #查看Hexo的版本</span><br><span class="line"></span><br><span class="line">hexo n == hexo new</span><br><span class="line">hexo g == hexo generate</span><br><span class="line">hexo s == hexo server</span><br><span class="line">hexo d == hexo deploy</span><br><span class="line"></span><br><span class="line">// 头部信息</span><br><span class="line">title: 使用Hexo搭建个人博客</span><br><span class="line">layout: post</span><br><span class="line">date: 2014-03-03 19:07:43</span><br><span class="line">comments: true</span><br><span class="line">categories: Blog</span><br><span class="line">tags: [Hexo]</span><br><span class="line">keywords: Hexo, Blog</span><br><span class="line">description:</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;大概流程&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;创建仓库，&lt;a href=&quot;http://abcdkyd.github.io&quot;&gt;abcdkyd.github.io&lt;/a&gt;；&lt;/li&gt;
&lt;li&gt;创建两个分支：master 与 hexo；&lt;/li&gt;
&lt;li&gt;设置hexo为默认分支（因为我们只需要手动管理这个分支上的Hexo网站文件）；&lt;/li&gt;
&lt;li&gt;使用git clone &lt;a href=&quot;mailto:git@github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git@github.com&lt;/a&gt;:abcdkyd/abcdkyd.github.io.git拷贝仓库；&lt;/li&gt;
&lt;li&gt;在本地 &lt;a href=&quot;http://abcdkyd.github.io&quot;&gt;abcdkyd.github.io&lt;/a&gt; 文件夹下通过Git bash依次执行npm install hexo-cli、hexo init、npm install 和 npm install hexo-deployer-git（此时当前分支应显示为hexo）;&lt;/li&gt;
&lt;li&gt;修改_config.yml中的deploy参数，分支应为master；&lt;/li&gt;
&lt;li&gt;使用git init 、git remote add origin &lt;a href=&quot;mailto:git@github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git@github.com&lt;/a&gt;:sylujia/sylujia.github.io.git以及git pull命令重新关联远端库。&lt;/li&gt;
&lt;li&gt;使用git checkout hexo命令切换到hexo分支然后依次执行git add .、git commit -m “…”、git push origin hexo提交网站相关的文件；&lt;/li&gt;
&lt;li&gt;执行hexo generate -d生成网站并部署到GitHub上。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="效率" scheme="https://abcdkyd.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="hexo" scheme="https://abcdkyd.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 简单语法</title>
    <link href="https://abcdkyd.github.io/2017/03/28/markdown-rumen/"/>
    <id>https://abcdkyd.github.io/2017/03/28/markdown-rumen/</id>
    <published>2017-03-28T06:17:06.000Z</published>
    <updated>2018-06-02T10:50:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Markdown是一种轻量级的标记语言，可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。</p><a id="more"></a><h1>简要规则</h1><h3 id="标题"><a class="header-anchor" href="#标题"></a>标题</h3><p>1.在需要作为标题的内容前添加 <code>#</code><br>一共6级标题，右边可补充等量或不等量闭合符号，标题等级由前面 <code>#</code> 数量决定<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">### 三级标题 ####</span><br></pre></td></tr></table></figure><p>2.在标题下添加两个以上的 <code>=</code> （最高阶标题） 和 <code>-</code> （第二阶标题）<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">一级标题</span><br><span class="line">====</span><br><span class="line">二级标题</span><br><span class="line">----</span><br></pre></td></tr></table></figure><h3 id="引用"><a class="header-anchor" href="#引用"></a>引用</h3><p>在需要引用的内容前添加 <code>&gt;</code><br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是引用的内容</span><br></pre></td></tr></table></figure><h3 id="列表"><a class="header-anchor" href="#列表"></a>列表</h3><p>无序列表使用 <code>*</code>、<code>-</code> 和 <code>+</code>，有序列表使用数字加英文句点 <code>1.</code><br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* 1</span><br><span class="line">* 2</span><br><span class="line">* 3</span><br><span class="line"> </span><br><span class="line">- 1</span><br><span class="line">- 2</span><br><span class="line">- 3</span><br><span class="line"></span><br><span class="line">1. 1</span><br><span class="line">2. 2</span><br><span class="line">3. 3</span><br></pre></td></tr></table></figure><h3 id="粗体和斜体"><a class="header-anchor" href="#粗体和斜体"></a>粗体和斜体</h3><p>在需要设置的文字两端添加 <code>*</code> 或 <code>_</code><br>斜体1个 <code>*斜体*、_斜体_</code>，粗体2个 <code>**粗体**、__粗体__</code><br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">***斜体加粗***</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><strong><em>斜体加粗</em></strong><br><s>删除线</s></p><h3 id="分隔线"><a class="header-anchor" href="#分隔线"></a>分隔线</h3><p>在一行中用三个以上的 <code>*</code>、 <code>-</code>、 <code>_</code> 来建立一个分隔线，行内不能有其他东西。也可以在符号号中间插入空格。<br>如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">* * *</span><br><span class="line">- - -</span><br><span class="line">______</span><br></pre></td></tr></table></figure><h3 id="表格"><a class="header-anchor" href="#表格"></a>表格</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">|title|name|</span><br><span class="line">|---:|:--:|</span><br><span class="line">|title1|name1|</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:right">title</th><th style="text-align:center">name</th></tr></thead><tbody><tr><td style="text-align:right">title1</td><td style="text-align:center">name1</td></tr></tbody></table><h3 id="链接"><a class="header-anchor" href="#链接"></a>链接</h3><p>链接有两种方式，内联方式和引用方式<br>内联方式：<br><code>[]</code> 里面是链接的文字，<code>()</code> 里面是链接的地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这是[百度](http://www.baidu.com)的链接</span><br></pre></td></tr></table></figure><p>这是<a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a>的链接</p><p>引用方式：<br><code>[]</code> 里面是引用标记，接着是链接的地址，最后可以加上链接的title属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[百度一下][baidu]、[必应][biying]</span><br><span class="line">[baidu]: http://www.baidu.com &quot;鼠标停留显示的文字&quot;</span><br><span class="line">[biying]: http://cn.bing.com &quot;鼠标停留显示的文字&quot;</span><br></pre></td></tr></table></figure><p>[百度一下][baidu]、[必应][biying]<br>[baidu]: <a href="http://www.baidu.com" target="_blank" rel="noopener">http://www.baidu.com</a> “鼠标停留显示的文字”<br>[biying]: <a href="http://cn.bing.com" target="_blank" rel="noopener">http://cn.bing.com</a> “鼠标停留显示的文字”</p><h3 id="图片"><a class="header-anchor" href="#图片"></a>图片</h3><p>图片跟链接格式相似，同样有内联方式和引用方式，区别是图片前面多一个 <code>!</code><br>内联方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![Alt text](/path/to/img.jpg &quot;Optional title&quot;)</span><br></pre></td></tr></table></figure><p>引用方式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![Alt text][id]</span><br><span class="line">[id]: url/to/image  &quot;Optional title&quot;</span><br></pre></td></tr></table></figure><h3 id="emoji-表情"><a class="header-anchor" href="#emoji-表情"></a>Emoji 表情</h3><p><code>:blush:</code> 😊 <code>:smile:</code> 😄 <code>:joy:</code> 😂 <code>:sob:</code> 😭</p><p><a href="https://github.com/abcdkyd/abcdkyd.github.io/blob/hexo/emoji.md" target="_blank" rel="noopener">表情名称参考</a></p><p><strong>让hexo支持emoji表情</strong></p><p>markdown 变成html的转换器叫做<code>markdown渲染器</code>，在Hexo中默认的markdown渲染器 使用的是<code>hexo-renderer-marked</code>,是Hexo版本，这个渲染器不支持插件扩展。<br>另外一个 markdown 渲染器 <code>hexo-renderer-markdown-it</code>，这个支持插件配置，可以使用 markwon-it-emoji插件来支持emoji。需要将原来的 marked 渲染器换成 markdown-it渲染器。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cd Documents/blog</span><br><span class="line"># npm un hexo-renderer-marked --save</span><br><span class="line"># npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><p>安装markdown-it-emoji插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install markdown-it-emoji --save</span><br></pre></td></tr></table></figure><p>配置根目录下的_config.yml，添加以下配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># Markdown-it config</span><br><span class="line">## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wiki</span><br><span class="line">markdown:</span><br><span class="line">  render:</span><br><span class="line">    html: true</span><br><span class="line">    xhtmlOut: false</span><br><span class="line">    breaks: true</span><br><span class="line">    linkify: true</span><br><span class="line">    typographer: true</span><br><span class="line">    quotes: &apos;“”‘’&apos;</span><br><span class="line">  plugins:</span><br><span class="line">    - markdown-it-abbr</span><br><span class="line">    - markdown-it-footnote</span><br><span class="line">    - markdown-it-ins</span><br><span class="line">    - markdown-it-sub</span><br><span class="line">    - markdown-it-sup</span><br><span class="line">    - markdown-it-emoji  # add emoji</span><br><span class="line">  anchors:</span><br><span class="line">    level: 2</span><br><span class="line">    collisionSuffix: &apos;v&apos;</span><br><span class="line">    permalink: true</span><br><span class="line">    permalinkClass: header-anchor</span><br><span class="line">    permalinkSymbol: ¶</span><br></pre></td></tr></table></figure><h3 id="代码块"><a class="header-anchor" href="#代码块"></a>代码块</h3><p>用 <code>`</code> 标记简单的代码行<br>用 <code>```</code> 或 4个空格， 标记代码段，<code>```</code>后面可以跟代码类型来实现高亮 如：<code>``` php</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Markdown是一种轻量级的标记语言，可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。&lt;/p&gt;
    
    </summary>
    
      <category term="效率" scheme="https://abcdkyd.github.io/categories/%E6%95%88%E7%8E%87/"/>
    
    
      <category term="markdown" scheme="https://abcdkyd.github.io/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://abcdkyd.github.io/2017/03/27/hello-world/"/>
    <id>https://abcdkyd.github.io/2017/03/27/hello-world/</id>
    <published>2017-03-27T08:56:28.000Z</published>
    <updated>2018-06-02T10:50:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>建这个博客的目的是为了记录一些学习的笔记，如果有什么意见或建议，欢迎联系我。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建这个博客的目的是为了记录一些学习的笔记，如果有什么意见或建议，欢迎联系我。&lt;/p&gt;

      
    
    </summary>
    
      <category term="日常" scheme="https://abcdkyd.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="about" scheme="https://abcdkyd.github.io/tags/about/"/>
    
  </entry>
  
</feed>
